2b2f3eda2fe0c4e8d9f5c78bd8c2e009
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _reduxMockStore = _interopRequireDefault(require("redux-mock-store"));

var _reduxThunk = _interopRequireDefault(require("redux-thunk"));

var _fetchMock = _interopRequireDefault(require("fetch-mock"));

var _types = require("../src/types/types");

var _action = require("../src/action");

var middlewares = [_reduxThunk.default];
var mockStore = (0, _reduxMockStore.default)(middlewares);
describe('async actions', function () {
  afterEach(function () {
    _fetchMock.default.restore();
  });
  describe('request upcoming movies thunk test', function () {
    it('requesting movies', function () {
      _fetchMock.default.getOnce('', {
        body: {
          results: []
        }
      });

      var expectedActions = [{
        type: _types.REQUEST_UPCOMING_MOVIES_ACTION,
        page: 1
      }, {
        type: _types.REQUEST_UPCOMING_MOVIES_SUCCESS_ACTION,
        payload: {
          data: [],
          isFetchedMore: false
        }
      }];
      var store = mockStore({});
      return store.dispatch((0, _action.fetchUpcomingMovies)(1)).then(function () {
        return expect(store.getActions()).toEqual(expectedActions);
      });
    });
  });
  describe('request detail of movie thunk test', function () {
    var id = 12121;
    it('request movie detail', function () {
      _fetchMock.default.getOnce('', {
        body: {}
      });

      var expectedActions = [{
        type: _types.REQUEST_MOVIE_DETAILS_ACTION,
        id: id
      }, {
        type: _types.REQUEST_MOVIE_DETAILS_SUCCESS_ACTION,
        data: {}
      }];
      var store = mockStore({});
      return store.dispatch((0, _action.fetchMovieDetails)(id)).then(function () {
        return expect(store.getActions()).toEqual(expectedActions);
      });
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzeW5jLWFjdGlvbnMtdGVzdC50cyJdLCJuYW1lcyI6WyJtaWRkbGV3YXJlcyIsInRodW5rIiwibW9ja1N0b3JlIiwiZGVzY3JpYmUiLCJhZnRlckVhY2giLCJmZXRjaE1vY2siLCJyZXN0b3JlIiwiaXQiLCJnZXRPbmNlIiwiYm9keSIsInJlc3VsdHMiLCJleHBlY3RlZEFjdGlvbnMiLCJ0eXBlIiwiUkVRVUVTVF9VUENPTUlOR19NT1ZJRVNfQUNUSU9OIiwicGFnZSIsIlJFUVVFU1RfVVBDT01JTkdfTU9WSUVTX1NVQ0NFU1NfQUNUSU9OIiwicGF5bG9hZCIsImRhdGEiLCJpc0ZldGNoZWRNb3JlIiwic3RvcmUiLCJkaXNwYXRjaCIsInRoZW4iLCJleHBlY3QiLCJnZXRBY3Rpb25zIiwidG9FcXVhbCIsImlkIiwiUkVRVUVTVF9NT1ZJRV9ERVRBSUxTX0FDVElPTiIsIlJFUVVFU1RfTU9WSUVfREVUQUlMU19TVUNDRVNTX0FDVElPTiJdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFNQTs7QUFFQSxJQUFNQSxXQUFXLEdBQUcsQ0FBQ0MsbUJBQUQsQ0FBcEI7QUFDQSxJQUFNQyxTQUFTLEdBQUcsNkJBQW1CRixXQUFuQixDQUFsQjtBQUVBRyxRQUFRLENBQUMsZUFBRCxFQUFrQixZQUFNO0FBQzlCQyxFQUFBQSxTQUFTLENBQUMsWUFBTTtBQUNkQyx1QkFBVUMsT0FBVjtBQUNELEdBRlEsQ0FBVDtBQUlBSCxFQUFBQSxRQUFRLENBQUMsb0NBQUQsRUFBdUMsWUFBTTtBQUNuREksSUFBQUEsRUFBRSxDQUFDLG1CQUFELEVBQXNCLFlBQU07QUFDNUJGLHlCQUFVRyxPQUFWLENBQWtCLEVBQWxCLEVBQXNCO0FBQ3BCQyxRQUFBQSxJQUFJLEVBQUU7QUFBQ0MsVUFBQUEsT0FBTyxFQUFFO0FBQVY7QUFEYyxPQUF0Qjs7QUFJQSxVQUFNQyxlQUFlLEdBQUcsQ0FDdEI7QUFBQ0MsUUFBQUEsSUFBSSxFQUFFQyxxQ0FBUDtBQUF1Q0MsUUFBQUEsSUFBSSxFQUFFO0FBQTdDLE9BRHNCLEVBRXRCO0FBQ0VGLFFBQUFBLElBQUksRUFBRUcsNkNBRFI7QUFFRUMsUUFBQUEsT0FBTyxFQUFFO0FBQUNDLFVBQUFBLElBQUksRUFBRSxFQUFQO0FBQVdDLFVBQUFBLGFBQWEsRUFBRTtBQUExQjtBQUZYLE9BRnNCLENBQXhCO0FBUUEsVUFBTUMsS0FBSyxHQUFHakIsU0FBUyxDQUFDLEVBQUQsQ0FBdkI7QUFFQSxhQUFPaUIsS0FBSyxDQUNUQyxRQURJLENBQ0ssaUNBQW9CLENBQXBCLENBREwsRUFFSkMsSUFGSSxDQUVDO0FBQUEsZUFBTUMsTUFBTSxDQUFDSCxLQUFLLENBQUNJLFVBQU4sRUFBRCxDQUFOLENBQTJCQyxPQUEzQixDQUFtQ2IsZUFBbkMsQ0FBTjtBQUFBLE9BRkQsQ0FBUDtBQUdELEtBbEJDLENBQUY7QUFtQkQsR0FwQk8sQ0FBUjtBQXNCQVIsRUFBQUEsUUFBUSxDQUFDLG9DQUFELEVBQXVDLFlBQU07QUFDbkQsUUFBTXNCLEVBQVUsR0FBRyxLQUFuQjtBQUNBbEIsSUFBQUEsRUFBRSxDQUFDLHNCQUFELEVBQXlCLFlBQU07QUFDL0JGLHlCQUFVRyxPQUFWLENBQWtCLEVBQWxCLEVBQXNCO0FBQ3BCQyxRQUFBQSxJQUFJLEVBQUU7QUFEYyxPQUF0Qjs7QUFJQSxVQUFNRSxlQUFlLEdBQUcsQ0FDdEI7QUFBQ0MsUUFBQUEsSUFBSSxFQUFFYyxtQ0FBUDtBQUFxQ0QsUUFBQUEsRUFBRSxFQUFFQTtBQUF6QyxPQURzQixFQUV0QjtBQUFDYixRQUFBQSxJQUFJLEVBQUVlLDJDQUFQO0FBQTZDVixRQUFBQSxJQUFJLEVBQUU7QUFBbkQsT0FGc0IsQ0FBeEI7QUFLQSxVQUFNRSxLQUFLLEdBQUdqQixTQUFTLENBQUMsRUFBRCxDQUF2QjtBQUVBLGFBQU9pQixLQUFLLENBQ1RDLFFBREksQ0FDSywrQkFBa0JLLEVBQWxCLENBREwsRUFFSkosSUFGSSxDQUVDO0FBQUEsZUFBTUMsTUFBTSxDQUFDSCxLQUFLLENBQUNJLFVBQU4sRUFBRCxDQUFOLENBQTJCQyxPQUEzQixDQUFtQ2IsZUFBbkMsQ0FBTjtBQUFBLE9BRkQsQ0FBUDtBQUdELEtBZkMsQ0FBRjtBQWdCRCxHQWxCTyxDQUFSO0FBbUJELENBOUNPLENBQVIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY29uZmlndXJlTW9ja1N0b3JlIGZyb20gJ3JlZHV4LW1vY2stc3RvcmUnO1xuaW1wb3J0IHRodW5rIGZyb20gJ3JlZHV4LXRodW5rJztcbmltcG9ydCBmZXRjaE1vY2sgZnJvbSAnZmV0Y2gtbW9jayc7XG5pbXBvcnQge1xuICBSRVFVRVNUX1VQQ09NSU5HX01PVklFU19BQ1RJT04sXG4gIFJFUVVFU1RfVVBDT01JTkdfTU9WSUVTX1NVQ0NFU1NfQUNUSU9OLFxuICBSRVFVRVNUX01PVklFX0RFVEFJTFNfQUNUSU9OLFxuICBSRVFVRVNUX01PVklFX0RFVEFJTFNfU1VDQ0VTU19BQ1RJT04sXG59IGZyb20gJy4uL3NyYy90eXBlcy90eXBlcyc7XG5pbXBvcnQge2ZldGNoVXBjb21pbmdNb3ZpZXMsIGZldGNoTW92aWVEZXRhaWxzfSBmcm9tICcuLi9zcmMvYWN0aW9uJztcblxuY29uc3QgbWlkZGxld2FyZXMgPSBbdGh1bmtdO1xuY29uc3QgbW9ja1N0b3JlID0gY29uZmlndXJlTW9ja1N0b3JlKG1pZGRsZXdhcmVzKTtcblxuZGVzY3JpYmUoJ2FzeW5jIGFjdGlvbnMnLCAoKSA9PiB7XG4gIGFmdGVyRWFjaCgoKSA9PiB7XG4gICAgZmV0Y2hNb2NrLnJlc3RvcmUoKTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ3JlcXVlc3QgdXBjb21pbmcgbW92aWVzIHRodW5rIHRlc3QnLCAoKSA9PiB7XG4gICAgaXQoJ3JlcXVlc3RpbmcgbW92aWVzJywgKCkgPT4ge1xuICAgICAgZmV0Y2hNb2NrLmdldE9uY2UoJycsIHtcbiAgICAgICAgYm9keToge3Jlc3VsdHM6IFtdfSxcbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCBleHBlY3RlZEFjdGlvbnMgPSBbXG4gICAgICAgIHt0eXBlOiBSRVFVRVNUX1VQQ09NSU5HX01PVklFU19BQ1RJT04sIHBhZ2U6IDF9LFxuICAgICAgICB7XG4gICAgICAgICAgdHlwZTogUkVRVUVTVF9VUENPTUlOR19NT1ZJRVNfU1VDQ0VTU19BQ1RJT04sXG4gICAgICAgICAgcGF5bG9hZDoge2RhdGE6IFtdLCBpc0ZldGNoZWRNb3JlOiBmYWxzZX0sXG4gICAgICAgIH0sXG4gICAgICBdO1xuXG4gICAgICBjb25zdCBzdG9yZSA9IG1vY2tTdG9yZSh7fSk7XG5cbiAgICAgIHJldHVybiBzdG9yZVxuICAgICAgICAuZGlzcGF0Y2goZmV0Y2hVcGNvbWluZ01vdmllcygxKSlcbiAgICAgICAgLnRoZW4oKCkgPT4gZXhwZWN0KHN0b3JlLmdldEFjdGlvbnMoKSkudG9FcXVhbChleHBlY3RlZEFjdGlvbnMpKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ3JlcXVlc3QgZGV0YWlsIG9mIG1vdmllIHRodW5rIHRlc3QnLCAoKSA9PiB7XG4gICAgY29uc3QgaWQ6IG51bWJlciA9IDEyMTIxO1xuICAgIGl0KCdyZXF1ZXN0IG1vdmllIGRldGFpbCcsICgpID0+IHtcbiAgICAgIGZldGNoTW9jay5nZXRPbmNlKCcnLCB7XG4gICAgICAgIGJvZHk6IHt9LFxuICAgICAgfSk7XG5cbiAgICAgIGNvbnN0IGV4cGVjdGVkQWN0aW9ucyA9IFtcbiAgICAgICAge3R5cGU6IFJFUVVFU1RfTU9WSUVfREVUQUlMU19BQ1RJT04sIGlkOiBpZH0sXG4gICAgICAgIHt0eXBlOiBSRVFVRVNUX01PVklFX0RFVEFJTFNfU1VDQ0VTU19BQ1RJT04sIGRhdGE6IHt9fSxcbiAgICAgIF07XG5cbiAgICAgIGNvbnN0IHN0b3JlID0gbW9ja1N0b3JlKHt9KTtcblxuICAgICAgcmV0dXJuIHN0b3JlXG4gICAgICAgIC5kaXNwYXRjaChmZXRjaE1vdmllRGV0YWlscyhpZCkpXG4gICAgICAgIC50aGVuKCgpID0+IGV4cGVjdChzdG9yZS5nZXRBY3Rpb25zKCkpLnRvRXF1YWwoZXhwZWN0ZWRBY3Rpb25zKSk7XG4gICAgfSk7XG4gIH0pO1xufSk7XG4iXX0=