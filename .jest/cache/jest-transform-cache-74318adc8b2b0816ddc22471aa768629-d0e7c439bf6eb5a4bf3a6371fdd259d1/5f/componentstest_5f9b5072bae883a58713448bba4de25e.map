{"version":3,"sources":["components-test.js"],"names":["mockStore","thunk","describe","movie","id","original_language","original_title","overview","release_date","title","vote_average","adult","backdrop_path","genre_ids","popularity","poster_path","video","vote_count","it","tree","renderer","create","toJSON","expect","toMatchSnapshot","store","movieDetailReducer","error","loadiing","toMatchInlineSnapshot"],"mappings":";;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEA,IAAMA,SAAS,GAAG,6BAAmB,CAACC,mBAAD,CAAnB,CAAlB;AAEAC,QAAQ,CAAC,iBAAD,EAAoB,YAAM;AAQhCA,EAAAA,QAAQ,CAAC,iBAAD,EAAoB,YAAM;AAChC,QAAMC,KAAK,GAAG;AACZC,MAAAA,EAAE,EAAE,IADQ;AAEZC,MAAAA,iBAAiB,EAAE,IAFP;AAGZC,MAAAA,cAAc,EAAE,OAHJ;AAIZC,MAAAA,QAAQ,EAAE,GAJE;AAKZC,MAAAA,YAAY,EAAE,GALF;AAMZC,MAAAA,KAAK,EAAE,OANK;AAOZC,MAAAA,YAAY,EAAE,IAPF;AAQZC,MAAAA,KAAK,EAAE,KARK;AASZC,MAAAA,aAAa,EAAE,EATH;AAUZC,MAAAA,SAAS,EAAE,CAAC,GAAD,EAAM,EAAN,CAVC;AAWZC,MAAAA,UAAU,EAAE,GAXA;AAYZC,MAAAA,WAAW,EAAE,OAZD;AAaZC,MAAAA,KAAK,EAAE,KAbK;AAcZC,MAAAA,UAAU,EAAE;AAdA,KAAd;AAgBAC,IAAAA,EAAE,CAAC,0BAAD,EAA6B,YAAM;AACnC,UAAMC,IAAI,GAAGC,2BAASC,MAAT,CAAgB,6BAAC,kBAAD;AAAW,QAAA,KAAK,EAAElB;AAAlB,QAAhB,EAA6CmB,MAA7C,EAAb;;AACAC,MAAAA,MAAM,CAACJ,IAAD,CAAN,CAAaK,eAAb;AACD,KAHC,CAAF;AAID,GArBO,CAAR;AAuBAtB,EAAAA,QAAQ,CAAC,0BAAD,EAA6B,YAAM;AACzC,QAAMuB,KAAK,GAAGzB,SAAS,CAAC;AACtB0B,MAAAA,kBAAkB,EAAE;AAClBC,QAAAA,KAAK,EAAE,IADW;AAElBC,QAAAA,QAAQ,EAAE,KAFQ;AAGlBzB,QAAAA,KAAK,EAAE;AAHW;AADE,KAAD,CAAvB;;AAOA,QAAMgB,IAAI,GAAGC,2BACVC,MADU,CAET,6BAAC,oBAAD;AAAU,MAAA,KAAK,EAAEI;AAAjB,OACE,6BAAC,qBAAD,OADF,CAFS,EAMVH,MANU,EAAb;;AAOAC,IAAAA,MAAM,CAACJ,IAAD,CAAN,CAAaU,qBAAb;AAiHD,GAhIO,CAAR;AAiID,CAhKO,CAAR","sourcesContent":["import React from 'react';\nimport renderer from 'react-test-renderer';\nimport MovieCard from '../src/components/MovieCard';\nimport MovieDetails from '../src/components/MovieDetails';\nimport configureMockStore from 'redux-mock-store';\nimport {Provider} from 'react-redux';\nimport thunk from 'redux-thunk';\n\nconst mockStore = configureMockStore([thunk]);\n\ndescribe('Component tests', () => {\n  // describe('App Test', () => {\n  //   it('should match to snapShot', () => {\n  //     const tree = renderer.create(<App />).toJSON();\n  //     expect(tree).toMatchSnapshot();\n  //   });\n  // });\n\n  describe('Movie Card Test', () => {\n    const movie = {\n      id: 1212,\n      original_language: 'en',\n      original_title: 'dummy',\n      overview: 121,\n      release_date: 112,\n      title: 'dummy',\n      vote_average: 1212,\n      adult: false,\n      backdrop_path: '',\n      genre_ids: [121, 22],\n      popularity: 4.3,\n      poster_path: 'fjfjd',\n      video: false,\n      vote_count: 121,\n    };\n    it('should match to snapShot', () => {\n      const tree = renderer.create(<MovieCard movie={movie} />).toJSON();\n      expect(tree).toMatchSnapshot();\n    });\n  });\n\n  describe('should match to snapshot', () => {\n    const store = mockStore({\n      movieDetailReducer: {\n        error: null,\n        loadiing: false,\n        movie: {},\n      },\n    });\n    const tree = renderer\n      .create(\n        <Provider store={store}>\n          <MovieDetails />\n        </Provider>,\n      )\n      .toJSON();\n    expect(tree).toMatchInlineSnapshot(`\n      <View\n        style={\n          Object {\n            \"backgroundColor\": \"#ffffff\",\n            \"flex\": 1,\n            \"padding\": 10,\n          }\n        }\n      >\n        <View\n          style={\n            Object {\n              \"flex\": 1,\n            }\n          }\n        >\n          <Image\n            source={\n              Object {\n                \"uri\": \"http://image.tmdb.org/t/p/originalundefined\",\n              }\n            }\n            style={\n              Object {\n                \"flex\": 1,\n                \"height\": undefined,\n                \"resizeMode\": \"cover\",\n              }\n            }\n          />\n        </View>\n        <RCTScrollView\n          style={\n            Object {\n              \"flex\": 1,\n              \"paddingTop\": 10,\n            }\n          }\n        >\n          <View>\n            <View\n              style={\n                Object {\n                  \"alignItems\": \"center\",\n                  \"flexDirection\": \"row\",\n                }\n              }\n            >\n              <Text\n                style={\n                  Object {\n                    \"color\": \"#4a4a4a\",\n                    \"fontSize\": 18,\n                    \"fontWeight\": \"500\",\n                  }\n                }\n              />\n              <Text\n                style={\n                  Object {\n                    \"color\": \"#9b9b9b\",\n                    \"fontSize\": 16,\n                    \"paddingLeft\": 5,\n                  }\n                }\n              >\n                (\n                )\n              </Text>\n            </View>\n            <View\n              style={\n                Object {\n                  \"paddingTop\": 15,\n                }\n              }\n            >\n              <Text\n                style={\n                  Object {\n                    \"color\": \"#4a4a4a\",\n                    \"fontSize\": 16,\n                  }\n                }\n              >\n                 | \n                NaN:NaN\n              </Text>\n              <Text\n                style={\n                  Object {\n                    \"color\": \"#4a4a4a\",\n                    \"fontSize\": 16,\n                  }\n                }\n              >\n                Cast : Actor 1 | Actor 2\n              </Text>\n              <Text\n                style={\n                  Object {\n                    \"color\": \"#4a4a4a\",\n                    \"fontSize\": 16,\n                    \"paddingTop\": 16,\n                  }\n                }\n              />\n            </View>\n          </View>\n        </RCTScrollView>\n      </View>\n    `);\n  });\n});\n"]}