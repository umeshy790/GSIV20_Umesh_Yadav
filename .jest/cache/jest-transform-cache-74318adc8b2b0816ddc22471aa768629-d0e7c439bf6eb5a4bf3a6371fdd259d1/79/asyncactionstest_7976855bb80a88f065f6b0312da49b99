76f3d4c960bddf86167ff6e43e6c444a
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _reduxMockStore = _interopRequireDefault(require("redux-mock-store"));

var _reduxThunk = _interopRequireDefault(require("redux-thunk"));

var _fetchMock = _interopRequireDefault(require("fetch-mock"));

var _types = require("../src/types/types");

var _action = require("../src/action");

var middlewares = [_reduxThunk.default];
var mockStore = (0, _reduxMockStore.default)(middlewares);
describe('async actions', function () {
  afterEach(function () {
    _fetchMock.default.restore();
  });
  describe('request upcoming movies thunk test', function () {
    it('requesting movies', function () {
      _fetchMock.default.getOnce('', {
        body: {
          results: []
        }
      });

      var expectedActions = [{
        type: _types.REQUEST_UPCOMING_MOVIES_ACTION
      }, {
        type: _types.REQUEST_UPCOMING_MOVIES_SUCCESS_ACTION,
        payload: {
          data: [],
          isFetchedMore: false
        }
      }];
      var store = mockStore({});
      return store.dispatch((0, _action.fetchUpcomingMovies)(1)).then(function () {
        return expect(store.getActions()).toEqual(expectedActions);
      });
    });
  });
  describe('request detail of movie thunk test', function () {
    var id = 12121;
    it('request movie detail', function () {
      _fetchMock.default.getOnce('', {
        body: {}
      });

      var expectedActions = [{
        type: _types.REQUEST_MOVIE_DETAILS_ACTION,
        id: id
      }, {
        type: _types.REQUEST_MOVIE_DETAILS_SUCCESS_ACTION,
        data: {}
      }];
      var store = mockStore({});
      return store.dispatch((0, _action.fetchMovieDetails)(id)).then(function () {
        return expect(store.getActions()).toEqual(expectedActions);
      });
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzeW5jLWFjdGlvbnMtdGVzdC50cyJdLCJuYW1lcyI6WyJtaWRkbGV3YXJlcyIsInRodW5rIiwibW9ja1N0b3JlIiwiZGVzY3JpYmUiLCJhZnRlckVhY2giLCJmZXRjaE1vY2siLCJyZXN0b3JlIiwiaXQiLCJnZXRPbmNlIiwiYm9keSIsInJlc3VsdHMiLCJleHBlY3RlZEFjdGlvbnMiLCJ0eXBlIiwiUkVRVUVTVF9VUENPTUlOR19NT1ZJRVNfQUNUSU9OIiwiUkVRVUVTVF9VUENPTUlOR19NT1ZJRVNfU1VDQ0VTU19BQ1RJT04iLCJwYXlsb2FkIiwiZGF0YSIsImlzRmV0Y2hlZE1vcmUiLCJzdG9yZSIsImRpc3BhdGNoIiwidGhlbiIsImV4cGVjdCIsImdldEFjdGlvbnMiLCJ0b0VxdWFsIiwiaWQiLCJSRVFVRVNUX01PVklFX0RFVEFJTFNfQUNUSU9OIiwiUkVRVUVTVF9NT1ZJRV9ERVRBSUxTX1NVQ0NFU1NfQUNUSU9OIl0sIm1hcHBpbmdzIjoiOztBQUFBOztBQUNBOztBQUNBOztBQUNBOztBQU1BOztBQUVBLElBQU1BLFdBQVcsR0FBRyxDQUFDQyxtQkFBRCxDQUFwQjtBQUNBLElBQU1DLFNBQVMsR0FBRyw2QkFBbUJGLFdBQW5CLENBQWxCO0FBRUFHLFFBQVEsQ0FBQyxlQUFELEVBQWtCLFlBQU07QUFDOUJDLEVBQUFBLFNBQVMsQ0FBQyxZQUFNO0FBQ2RDLHVCQUFVQyxPQUFWO0FBQ0QsR0FGUSxDQUFUO0FBSUFILEVBQUFBLFFBQVEsQ0FBQyxvQ0FBRCxFQUF1QyxZQUFNO0FBQ25ESSxJQUFBQSxFQUFFLENBQUMsbUJBQUQsRUFBc0IsWUFBTTtBQUM1QkYseUJBQVVHLE9BQVYsQ0FBa0IsRUFBbEIsRUFBc0I7QUFDcEJDLFFBQUFBLElBQUksRUFBRTtBQUFDQyxVQUFBQSxPQUFPLEVBQUU7QUFBVjtBQURjLE9BQXRCOztBQUlBLFVBQU1DLGVBQWUsR0FBRyxDQUN0QjtBQUFDQyxRQUFBQSxJQUFJLEVBQUVDO0FBQVAsT0FEc0IsRUFFdEI7QUFDRUQsUUFBQUEsSUFBSSxFQUFFRSw2Q0FEUjtBQUVFQyxRQUFBQSxPQUFPLEVBQUU7QUFBQ0MsVUFBQUEsSUFBSSxFQUFFLEVBQVA7QUFBV0MsVUFBQUEsYUFBYSxFQUFFO0FBQTFCO0FBRlgsT0FGc0IsQ0FBeEI7QUFRQSxVQUFNQyxLQUFLLEdBQUdoQixTQUFTLENBQUMsRUFBRCxDQUF2QjtBQUVBLGFBQU9nQixLQUFLLENBQ1RDLFFBREksQ0FDSyxpQ0FBb0IsQ0FBcEIsQ0FETCxFQUVKQyxJQUZJLENBRUM7QUFBQSxlQUFNQyxNQUFNLENBQUNILEtBQUssQ0FBQ0ksVUFBTixFQUFELENBQU4sQ0FBMkJDLE9BQTNCLENBQW1DWixlQUFuQyxDQUFOO0FBQUEsT0FGRCxDQUFQO0FBR0QsS0FsQkMsQ0FBRjtBQW1CRCxHQXBCTyxDQUFSO0FBc0JBUixFQUFBQSxRQUFRLENBQUMsb0NBQUQsRUFBdUMsWUFBTTtBQUNuRCxRQUFNcUIsRUFBVSxHQUFHLEtBQW5CO0FBQ0FqQixJQUFBQSxFQUFFLENBQUMsc0JBQUQsRUFBeUIsWUFBTTtBQUMvQkYseUJBQVVHLE9BQVYsQ0FBa0IsRUFBbEIsRUFBc0I7QUFDcEJDLFFBQUFBLElBQUksRUFBRTtBQURjLE9BQXRCOztBQUlBLFVBQU1FLGVBQWUsR0FBRyxDQUN0QjtBQUFDQyxRQUFBQSxJQUFJLEVBQUVhLG1DQUFQO0FBQXFDRCxRQUFBQSxFQUFFLEVBQUVBO0FBQXpDLE9BRHNCLEVBRXRCO0FBQUNaLFFBQUFBLElBQUksRUFBRWMsMkNBQVA7QUFBNkNWLFFBQUFBLElBQUksRUFBRTtBQUFuRCxPQUZzQixDQUF4QjtBQUtBLFVBQU1FLEtBQUssR0FBR2hCLFNBQVMsQ0FBQyxFQUFELENBQXZCO0FBRUEsYUFBT2dCLEtBQUssQ0FDVEMsUUFESSxDQUNLLCtCQUFrQkssRUFBbEIsQ0FETCxFQUVKSixJQUZJLENBRUM7QUFBQSxlQUFNQyxNQUFNLENBQUNILEtBQUssQ0FBQ0ksVUFBTixFQUFELENBQU4sQ0FBMkJDLE9BQTNCLENBQW1DWixlQUFuQyxDQUFOO0FBQUEsT0FGRCxDQUFQO0FBR0QsS0FmQyxDQUFGO0FBZ0JELEdBbEJPLENBQVI7QUFtQkQsQ0E5Q08sQ0FBUiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjb25maWd1cmVNb2NrU3RvcmUgZnJvbSAncmVkdXgtbW9jay1zdG9yZSc7XG5pbXBvcnQgdGh1bmsgZnJvbSAncmVkdXgtdGh1bmsnO1xuaW1wb3J0IGZldGNoTW9jayBmcm9tICdmZXRjaC1tb2NrJztcbmltcG9ydCB7XG4gIFJFUVVFU1RfVVBDT01JTkdfTU9WSUVTX0FDVElPTixcbiAgUkVRVUVTVF9VUENPTUlOR19NT1ZJRVNfU1VDQ0VTU19BQ1RJT04sXG4gIFJFUVVFU1RfTU9WSUVfREVUQUlMU19BQ1RJT04sXG4gIFJFUVVFU1RfTU9WSUVfREVUQUlMU19TVUNDRVNTX0FDVElPTixcbn0gZnJvbSAnLi4vc3JjL3R5cGVzL3R5cGVzJztcbmltcG9ydCB7ZmV0Y2hVcGNvbWluZ01vdmllcywgZmV0Y2hNb3ZpZURldGFpbHN9IGZyb20gJy4uL3NyYy9hY3Rpb24nO1xuXG5jb25zdCBtaWRkbGV3YXJlcyA9IFt0aHVua107XG5jb25zdCBtb2NrU3RvcmUgPSBjb25maWd1cmVNb2NrU3RvcmUobWlkZGxld2FyZXMpO1xuXG5kZXNjcmliZSgnYXN5bmMgYWN0aW9ucycsICgpID0+IHtcbiAgYWZ0ZXJFYWNoKCgpID0+IHtcbiAgICBmZXRjaE1vY2sucmVzdG9yZSgpO1xuICB9KTtcblxuICBkZXNjcmliZSgncmVxdWVzdCB1cGNvbWluZyBtb3ZpZXMgdGh1bmsgdGVzdCcsICgpID0+IHtcbiAgICBpdCgncmVxdWVzdGluZyBtb3ZpZXMnLCAoKSA9PiB7XG4gICAgICBmZXRjaE1vY2suZ2V0T25jZSgnJywge1xuICAgICAgICBib2R5OiB7cmVzdWx0czogW119LFxuICAgICAgfSk7XG5cbiAgICAgIGNvbnN0IGV4cGVjdGVkQWN0aW9ucyA9IFtcbiAgICAgICAge3R5cGU6IFJFUVVFU1RfVVBDT01JTkdfTU9WSUVTX0FDVElPTn0sXG4gICAgICAgIHtcbiAgICAgICAgICB0eXBlOiBSRVFVRVNUX1VQQ09NSU5HX01PVklFU19TVUNDRVNTX0FDVElPTixcbiAgICAgICAgICBwYXlsb2FkOiB7ZGF0YTogW10sIGlzRmV0Y2hlZE1vcmU6IGZhbHNlfSxcbiAgICAgICAgfSxcbiAgICAgIF07XG5cbiAgICAgIGNvbnN0IHN0b3JlID0gbW9ja1N0b3JlKHt9KTtcblxuICAgICAgcmV0dXJuIHN0b3JlXG4gICAgICAgIC5kaXNwYXRjaChmZXRjaFVwY29taW5nTW92aWVzKDEpKVxuICAgICAgICAudGhlbigoKSA9PiBleHBlY3Qoc3RvcmUuZ2V0QWN0aW9ucygpKS50b0VxdWFsKGV4cGVjdGVkQWN0aW9ucykpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgncmVxdWVzdCBkZXRhaWwgb2YgbW92aWUgdGh1bmsgdGVzdCcsICgpID0+IHtcbiAgICBjb25zdCBpZDogbnVtYmVyID0gMTIxMjE7XG4gICAgaXQoJ3JlcXVlc3QgbW92aWUgZGV0YWlsJywgKCkgPT4ge1xuICAgICAgZmV0Y2hNb2NrLmdldE9uY2UoJycsIHtcbiAgICAgICAgYm9keToge30sXG4gICAgICB9KTtcblxuICAgICAgY29uc3QgZXhwZWN0ZWRBY3Rpb25zID0gW1xuICAgICAgICB7dHlwZTogUkVRVUVTVF9NT1ZJRV9ERVRBSUxTX0FDVElPTiwgaWQ6IGlkfSxcbiAgICAgICAge3R5cGU6IFJFUVVFU1RfTU9WSUVfREVUQUlMU19TVUNDRVNTX0FDVElPTiwgZGF0YToge319LFxuICAgICAgXTtcblxuICAgICAgY29uc3Qgc3RvcmUgPSBtb2NrU3RvcmUoe30pO1xuXG4gICAgICByZXR1cm4gc3RvcmVcbiAgICAgICAgLmRpc3BhdGNoKGZldGNoTW92aWVEZXRhaWxzKGlkKSlcbiAgICAgICAgLnRoZW4oKCkgPT4gZXhwZWN0KHN0b3JlLmdldEFjdGlvbnMoKSkudG9FcXVhbChleHBlY3RlZEFjdGlvbnMpKTtcbiAgICB9KTtcbiAgfSk7XG59KTtcbiJdfQ==