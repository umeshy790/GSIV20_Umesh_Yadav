{"version":3,"sources":["async-actions-test.ts"],"names":["middlewares","thunk","mockStore","describe","afterEach","fetchMock","restore","it","getOnce","body","results","headers","expectedActions","type","REQUEST_UPCOMING_MOVIES_ACTION","REQUEST_UPCOMING_MOVIES_SUCCESS_ACTION","data","store","dispatch","then","expect","getActions","toEqual","id","REQUEST_MOVIE_DETAILS_ACTION","REQUEST_MOVIE_DETAILS_SUCCESS_ACTION"],"mappings":";;AAAA;;AACA;;AACA;;AACA;;AAMA;;AAEA,IAAMA,WAAW,GAAG,CAACC,mBAAD,CAApB;AACA,IAAMC,SAAS,GAAG,6BAAmBF,WAAnB,CAAlB;AAEAG,QAAQ,CAAC,eAAD,EAAkB,YAAM;AAC9BC,EAAAA,SAAS,CAAC,YAAM;AACdC,uBAAUC,OAAV;AACD,GAFQ,CAAT;AAIAH,EAAAA,QAAQ,CAAC,oCAAD,EAAuC,YAAM;AACnDI,IAAAA,EAAE,CAAC,mBAAD,EAAsB,YAAM;AAC5BF,yBAAUG,OAAV,CAAkB,EAAlB,EAAsB;AACpBC,QAAAA,IAAI,EAAE;AAACC,UAAAA,OAAO,EAAE;AAAV,SADc;AAEpBC,QAAAA,OAAO,EAAE;AAAC,0BAAgB;AAAjB;AAFW,OAAtB;;AAKA,UAAMC,eAAe,GAAG,CACtB;AAACC,QAAAA,IAAI,EAAEC;AAAP,OADsB,EAEtB;AAACD,QAAAA,IAAI,EAAEE,6CAAP;AAA+CC,QAAAA,IAAI,EAAE;AAArD,OAFsB,CAAxB;AAKA,UAAMC,KAAK,GAAGf,SAAS,CAAC,EAAD,CAAvB;AAEA,aAAOe,KAAK,CACTC,QADI,CACK,kCADL,EAEJC,IAFI,CAEC;AAAA,eAAMC,MAAM,CAACH,KAAK,CAACI,UAAN,EAAD,CAAN,CAA2BC,OAA3B,CAAmCV,eAAnC,CAAN;AAAA,OAFD,CAAP;AAGD,KAhBC,CAAF;AAiBD,GAlBO,CAAR;AAoBAT,EAAAA,QAAQ,CAAC,oCAAD,EAAuC,YAAM;AACnD,QAAMoB,EAAU,GAAG,KAAnB;AACAhB,IAAAA,EAAE,CAAC,sBAAD,EAAyB,YAAM;AAC/BF,yBAAUG,OAAV,CAAkB,EAAlB,EAAsB;AACpBC,QAAAA,IAAI,EAAE;AADc,OAAtB;;AAIA,UAAMG,eAAe,GAAG,CACtB;AAACC,QAAAA,IAAI,EAAEW,mCAAP;AAAqCD,QAAAA,EAAE,EAAEA;AAAzC,OADsB,EAEtB;AAACV,QAAAA,IAAI,EAAEY,2CAAP;AAA6CT,QAAAA,IAAI,EAAE;AAAnD,OAFsB,CAAxB;AAKA,UAAMC,KAAK,GAAGf,SAAS,CAAC,EAAD,CAAvB;AAEA,aAAOe,KAAK,CACTC,QADI,CACK,+BAAkBK,EAAlB,CADL,EAEJJ,IAFI,CAEC;AAAA,eAAMC,MAAM,CAACH,KAAK,CAACI,UAAN,EAAD,CAAN,CAA2BC,OAA3B,CAAmCV,eAAnC,CAAN;AAAA,OAFD,CAAP;AAGD,KAfC,CAAF;AAgBD,GAlBO,CAAR;AAmBD,CA5CO,CAAR","sourcesContent":["import configureMockStore from 'redux-mock-store';\nimport thunk from 'redux-thunk';\nimport fetchMock from 'fetch-mock';\nimport {\n  REQUEST_UPCOMING_MOVIES_ACTION,\n  REQUEST_UPCOMING_MOVIES_SUCCESS_ACTION,\n  REQUEST_MOVIE_DETAILS_ACTION,\n  REQUEST_MOVIE_DETAILS_SUCCESS_ACTION,\n} from '../src/types/types';\nimport {fetchUpcomingMovies, fetchMovieDetails} from '../src/action';\n\nconst middlewares = [thunk];\nconst mockStore = configureMockStore(middlewares);\n\ndescribe('async actions', () => {\n  afterEach(() => {\n    fetchMock.restore();\n  });\n\n  describe('request upcoming movies thunk test', () => {\n    it('requesting movies', () => {\n      fetchMock.getOnce('', {\n        body: {results: []},\n        headers: {'content-type': 'application/json'},\n      });\n\n      const expectedActions = [\n        {type: REQUEST_UPCOMING_MOVIES_ACTION},\n        {type: REQUEST_UPCOMING_MOVIES_SUCCESS_ACTION, data: []},\n      ];\n\n      const store = mockStore({});\n\n      return store\n        .dispatch(fetchUpcomingMovies())\n        .then(() => expect(store.getActions()).toEqual(expectedActions));\n    });\n  });\n\n  describe('request detail of movie thunk test', () => {\n    const id: number = 12121;\n    it('request movie detail', () => {\n      fetchMock.getOnce('', {\n        body: {},\n      });\n\n      const expectedActions = [\n        {type: REQUEST_MOVIE_DETAILS_ACTION, id: id},\n        {type: REQUEST_MOVIE_DETAILS_SUCCESS_ACTION, data: {}},\n      ];\n\n      const store = mockStore({});\n\n      return store\n        .dispatch(fetchMovieDetails(id))\n        .then(() => expect(store.getActions()).toEqual(expectedActions));\n    });\n  });\n});\n"]}