{"version":3,"file":"/home/umesh/Documents/dev/GSynergy/imdb/__tests__/actions-test.ts","sources":["/home/umesh/Documents/dev/GSynergy/imdb/__tests__/actions-test.ts"],"names":[],"mappings":"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","sourcesContent":["import * as types from '../src/types/types';\nimport * as actions from '../src/action/actions';\nimport {Movie} from '../src/modal/modals';\n\ndescribe('actions', () => {\n  it('should create a actions', () => {\n    const error: string = 'Some error';\n    const movies: Movie[] = [];\n    const movie: Movie = {\n      id: 1212,\n      original_language: 'en',\n      original_title: 'dummy',\n      overview: 121,\n      release_date: 112,\n      title: 'dummy',\n      vote_average: 1212,\n      adult: false,\n      backdrop_path: '',\n      genre_ids: [121, 22],\n      popularity: 4.3,\n      poster_path: 'fjfjd',\n      video: false,\n      vote_count: 121,\n    };\n    const id: number = 1212;\n\n    describe('request movie action', () => {\n      const page = 1;\n      const requestUpcomingMovieAction = {\n        type: types.REQUEST_UPCOMING_MOVIES_ACTION,\n        page: page,\n      };\n      expect(actions.requestUpcomingMoviesAction(page)).toEqual(\n        requestUpcomingMovieAction,\n      );\n    });\n\n    describe('request movie success action', () => {\n      const requestUpcomingMovieSuccessAction = {\n        type: types.REQUEST_UPCOMING_MOVIES_SUCCESS_ACTION,\n        payload: {\n          data: movies,\n          isFetchedMore: false,\n        },\n      };\n      expect(\n        actions.requestUpcomingMoviesSuccessAction({\n          data: movies,\n          isFetchedMore: false,\n        }),\n      ).toEqual(requestUpcomingMovieSuccessAction);\n    });\n\n    describe('request movie failed action', () => {\n      const requestUpcomingMovieFailedAction = {\n        type: types.REQUEST_UPCOMING_MOVIES_FAILED_ACTION,\n        error,\n      };\n      expect(actions.requestUpcomingMoviesFailedAction(error)).toEqual(\n        requestUpcomingMovieFailedAction,\n      );\n    });\n\n    describe('request movie detail action', () => {\n      const requestMovieDetailAction = {\n        type: types.REQUEST_MOVIE_DETAILS_ACTION,\n        id: id,\n      };\n      expect(actions.requestMovieDetailAction(id)).toEqual(\n        requestMovieDetailAction,\n      );\n    });\n\n    describe('request movie detail success action', () => {\n      const requestMovieDetailSuccessAction = {\n        type: types.REQUEST_MOVIE_DETAILS_SUCCESS_ACTION,\n        data: movie,\n      };\n      expect(actions.requestMovieDetailSuccessAction(movie)).toEqual(\n        requestMovieDetailSuccessAction,\n      );\n    });\n\n    describe('request movie detail failed action', () => {\n      const requestMovieDetailFailedAction = {\n        type: types.REQUEST_MOVIE_DETAILS_FAILED_ACTION,\n        error: error,\n      };\n      expect(actions.requestMovieDetailFailedAction(error)).toEqual(\n        requestMovieDetailFailedAction,\n      );\n    });\n  });\n});\n"]}