{"version":3,"sources":["index.ts"],"names":["fetchUpcomingMovies","page","dispatch","response","data","isFetchedMore","message","fetchMovieDetails","id"],"mappings":";;;;;;;;;AAAA;;AAWA;;AAIO,IAAMA,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACC,IAAD;AAAA,SAAqC,iBACtEC,QADsE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIpEA,YAAAA,QAAQ,CAAC,0CAA4BD,IAA5B,CAAD,CAAR;AAJoE;AAAA,8CAK7C,gCAAkBA,IAAlB,CAL6C;;AAAA;AAK9DE,YAAAA,QAL8D;AAMpED,YAAAA,QAAQ,CACN,iDAAmC;AACjCE,cAAAA,IAAI,EAAED,QAD2B;AAEjCE,cAAAA,aAAa,EAAEJ,IAAI,KAAK;AAFS,aAAnC,CADM,CAAR;AANoE;AAAA;;AAAA;AAAA;AAAA;AAapEC,YAAAA,QAAQ,CAAC,gDAAkC,YAAII,OAAtC,CAAD,CAAR;;AAboE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAArC;AAAA,CAA5B;;;;AAiBA,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAACC,EAAD;AAAA,SAAmC,kBAClEN,QADkE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIhEA,YAAAA,QAAQ,CAAC,uCAAyBM,EAAzB,CAAD,CAAR;AAJgE;AAAA,8CAKzC,8BAAgBA,EAAhB,CALyC;;AAAA;AAK1DL,YAAAA,QAL0D;AAMhED,YAAAA,QAAQ,CAAC,8CAAgCC,QAAhC,CAAD,CAAR;AANgE;AAAA;;AAAA;AAAA;AAAA;AAQhED,YAAAA,QAAQ,CAAC,6CAA+B,aAAII,OAAnC,CAAD,CAAR;;AARgE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAnC;AAAA,CAA1B","sourcesContent":["import {\n  requestUpcomingMoviesSuccessAction,\n  requestUpcomingMoviesAction,\n  requestUpcomingMoviesFailedAction,\n  requestMovieDetailAction,\n  requestMovieDetailSuccessAction,\n  requestMovieDetailFailedAction,\n} from './actions';\nimport {ThunkAction} from 'redux-thunk';\nimport {AnyAction, Dispatch} from 'redux';\nimport {RootState} from '../store';\nimport {getUpcomingMovies, getMovieDetails} from '../service/service';\n\ntype ThunkResult<R> = ThunkAction<R, RootState, undefined, AnyAction>;\n\nexport const fetchUpcomingMovies = (page: number): ThunkResult<void> => async (\n  dispatch: Dispatch,\n) => {\n  try {\n    dispatch(requestUpcomingMoviesAction(page));\n    const response = await getUpcomingMovies(page);\n    dispatch(\n      requestUpcomingMoviesSuccessAction({\n        data: response,\n        isFetchedMore: page !== 1,\n      }),\n    );\n  } catch (err) {\n    dispatch(requestUpcomingMoviesFailedAction(err.message));\n  }\n};\n\nexport const fetchMovieDetails = (id: number): ThunkResult<void> => async (\n  dispatch: Dispatch,\n) => {\n  try {\n    dispatch(requestMovieDetailAction(id));\n    const response = await getMovieDetails(id);\n    dispatch(requestMovieDetailSuccessAction(response));\n  } catch (err) {\n    dispatch(requestMovieDetailFailedAction(err.message));\n  }\n};\n"]}