ee5a12d00a0daf47d3cbf843748e9a80
var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var types = _interopRequireWildcard(require("../src/types/types"));

var actions = _interopRequireWildcard(require("../src/action/actions"));

describe('actions', function () {
  it('should create a actions', function () {
    var error = 'Some error';
    var movies = [];
    var movie = {
      id: 1212,
      original_language: 'en',
      original_title: 'dummy',
      overview: 121,
      release_date: 112,
      title: 'dummy',
      vote_average: 1212,
      adult: false,
      backdrop_path: '',
      genre_ids: [121, 22],
      popularity: 4.3,
      poster_path: 'fjfjd',
      video: false,
      vote_count: 121
    };
    var id = 1212;
    describe('request movie action', function () {
      var requestUpcomingMovieAction = {
        type: types.REQUEST_UPCOMING_MOVIES_ACTION
      };
      expect(actions.requestUpcomingMoviesAction()).toEqual(requestUpcomingMovieAction);
    });
    var requestUpcomingMovieSuccessAction = {
      type: types.REQUEST_UPCOMING_MOVIES_SUCCESS_ACTION,
      data: movies
    };
    expect(actions.requestUpcomingMoviesSuccessAction(movies)).toEqual(requestUpcomingMovieSuccessAction);
    var requestUpcomingMovieFailedAction = {
      type: types.REQUEST_UPCOMING_MOVIES_FAILED_ACTION,
      error: error
    };
    expect(actions.requestUpcomingMoviesFailedAction(error)).toEqual(requestUpcomingMovieFailedAction);
    var requestMovieDetailAction = {
      type: types.REQUEST_MOVIE_DETAILS_ACTION,
      id: id
    };
    expect(actions.requestMovieDetailAction(id)).toEqual(requestMovieDetailAction);
    var requestMovieDetailSuccessAction = {
      type: types.REQUEST_MOVIE_DETAILS_SUCCESS_ACTION,
      data: movie
    };
    expect(actions.requestMovieDetailSuccessAction(movie)).toEqual(requestMovieDetailSuccessAction);
    var requestMovieDetailFailedAction = {
      type: types.REQUEST_MOVIE_DETAILS_FAILED_ACTION,
      error: error
    };
    expect(actions.requestMovieDetailFailedAction(error)).toEqual(requestMovieDetailFailedAction);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFjdGlvbnMtdGVzdC50cyJdLCJuYW1lcyI6WyJkZXNjcmliZSIsIml0IiwiZXJyb3IiLCJtb3ZpZXMiLCJtb3ZpZSIsImlkIiwib3JpZ2luYWxfbGFuZ3VhZ2UiLCJvcmlnaW5hbF90aXRsZSIsIm92ZXJ2aWV3IiwicmVsZWFzZV9kYXRlIiwidGl0bGUiLCJ2b3RlX2F2ZXJhZ2UiLCJhZHVsdCIsImJhY2tkcm9wX3BhdGgiLCJnZW5yZV9pZHMiLCJwb3B1bGFyaXR5IiwicG9zdGVyX3BhdGgiLCJ2aWRlbyIsInZvdGVfY291bnQiLCJyZXF1ZXN0VXBjb21pbmdNb3ZpZUFjdGlvbiIsInR5cGUiLCJ0eXBlcyIsIlJFUVVFU1RfVVBDT01JTkdfTU9WSUVTX0FDVElPTiIsImV4cGVjdCIsImFjdGlvbnMiLCJyZXF1ZXN0VXBjb21pbmdNb3ZpZXNBY3Rpb24iLCJ0b0VxdWFsIiwicmVxdWVzdFVwY29taW5nTW92aWVTdWNjZXNzQWN0aW9uIiwiUkVRVUVTVF9VUENPTUlOR19NT1ZJRVNfU1VDQ0VTU19BQ1RJT04iLCJkYXRhIiwicmVxdWVzdFVwY29taW5nTW92aWVzU3VjY2Vzc0FjdGlvbiIsInJlcXVlc3RVcGNvbWluZ01vdmllRmFpbGVkQWN0aW9uIiwiUkVRVUVTVF9VUENPTUlOR19NT1ZJRVNfRkFJTEVEX0FDVElPTiIsInJlcXVlc3RVcGNvbWluZ01vdmllc0ZhaWxlZEFjdGlvbiIsInJlcXVlc3RNb3ZpZURldGFpbEFjdGlvbiIsIlJFUVVFU1RfTU9WSUVfREVUQUlMU19BQ1RJT04iLCJyZXF1ZXN0TW92aWVEZXRhaWxTdWNjZXNzQWN0aW9uIiwiUkVRVUVTVF9NT1ZJRV9ERVRBSUxTX1NVQ0NFU1NfQUNUSU9OIiwicmVxdWVzdE1vdmllRGV0YWlsRmFpbGVkQWN0aW9uIiwiUkVRVUVTVF9NT1ZJRV9ERVRBSUxTX0ZBSUxFRF9BQ1RJT04iXSwibWFwcGluZ3MiOiI7O0FBQUE7O0FBQ0E7O0FBR0FBLFFBQVEsQ0FBQyxTQUFELEVBQVksWUFBTTtBQUN4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IGZyb20gJy4uL3NyYy90eXBlcy90eXBlcyc7XG5pbXBvcnQgKiBhcyBhY3Rpb25zIGZyb20gJy4uL3NyYy9hY3Rpb24vYWN0aW9ucyc7XG5pbXBvcnQge01vdmllfSBmcm9tICcuLi9zcmMvbW9kYWwvbW9kYWxzJztcblxuZGVzY3JpYmUoJ2FjdGlvbnMnLCAoKSA9PiB7XG4gIGl0KCdzaG91bGQgY3JlYXRlIGEgYWN0aW9ucycsICgpID0+IHtcbiAgICBjb25zdCBlcnJvcjogc3RyaW5nID0gJ1NvbWUgZXJyb3InO1xuICAgIGNvbnN0IG1vdmllczogTW92aWVbXSA9IFtdO1xuICAgIGNvbnN0IG1vdmllOiBNb3ZpZSA9IHtcbiAgICAgIGlkOiAxMjEyLFxuICAgICAgb3JpZ2luYWxfbGFuZ3VhZ2U6ICdlbicsXG4gICAgICBvcmlnaW5hbF90aXRsZTogJ2R1bW15JyxcbiAgICAgIG92ZXJ2aWV3OiAxMjEsXG4gICAgICByZWxlYXNlX2RhdGU6IDExMixcbiAgICAgIHRpdGxlOiAnZHVtbXknLFxuICAgICAgdm90ZV9hdmVyYWdlOiAxMjEyLFxuICAgICAgYWR1bHQ6IGZhbHNlLFxuICAgICAgYmFja2Ryb3BfcGF0aDogJycsXG4gICAgICBnZW5yZV9pZHM6IFsxMjEsIDIyXSxcbiAgICAgIHBvcHVsYXJpdHk6IDQuMyxcbiAgICAgIHBvc3Rlcl9wYXRoOiAnZmpmamQnLFxuICAgICAgdmlkZW86IGZhbHNlLFxuICAgICAgdm90ZV9jb3VudDogMTIxLFxuICAgIH07XG4gICAgY29uc3QgaWQ6IG51bWJlciA9IDEyMTI7XG4gICAgZGVzY3JpYmUoJ3JlcXVlc3QgbW92aWUgYWN0aW9uJywgKCkgPT4ge1xuICAgICAgY29uc3QgcmVxdWVzdFVwY29taW5nTW92aWVBY3Rpb24gPSB7XG4gICAgICAgIHR5cGU6IHR5cGVzLlJFUVVFU1RfVVBDT01JTkdfTU9WSUVTX0FDVElPTixcbiAgICAgIH07XG4gICAgICBleHBlY3QoYWN0aW9ucy5yZXF1ZXN0VXBjb21pbmdNb3ZpZXNBY3Rpb24oKSkudG9FcXVhbChcbiAgICAgICAgcmVxdWVzdFVwY29taW5nTW92aWVBY3Rpb24sXG4gICAgICApO1xuICAgIH0pO1xuXG4gICAgY29uc3QgcmVxdWVzdFVwY29taW5nTW92aWVTdWNjZXNzQWN0aW9uID0ge1xuICAgICAgdHlwZTogdHlwZXMuUkVRVUVTVF9VUENPTUlOR19NT1ZJRVNfU1VDQ0VTU19BQ1RJT04sXG4gICAgICBkYXRhOiBtb3ZpZXMsXG4gICAgfTtcbiAgICBleHBlY3QoYWN0aW9ucy5yZXF1ZXN0VXBjb21pbmdNb3ZpZXNTdWNjZXNzQWN0aW9uKG1vdmllcykpLnRvRXF1YWwoXG4gICAgICByZXF1ZXN0VXBjb21pbmdNb3ZpZVN1Y2Nlc3NBY3Rpb24sXG4gICAgKTtcblxuICAgIGNvbnN0IHJlcXVlc3RVcGNvbWluZ01vdmllRmFpbGVkQWN0aW9uID0ge1xuICAgICAgdHlwZTogdHlwZXMuUkVRVUVTVF9VUENPTUlOR19NT1ZJRVNfRkFJTEVEX0FDVElPTixcbiAgICAgIGVycm9yLFxuICAgIH07XG4gICAgZXhwZWN0KGFjdGlvbnMucmVxdWVzdFVwY29taW5nTW92aWVzRmFpbGVkQWN0aW9uKGVycm9yKSkudG9FcXVhbChcbiAgICAgIHJlcXVlc3RVcGNvbWluZ01vdmllRmFpbGVkQWN0aW9uLFxuICAgICk7XG5cbiAgICBjb25zdCByZXF1ZXN0TW92aWVEZXRhaWxBY3Rpb24gPSB7XG4gICAgICB0eXBlOiB0eXBlcy5SRVFVRVNUX01PVklFX0RFVEFJTFNfQUNUSU9OLFxuICAgICAgaWQ6IGlkLFxuICAgIH07XG4gICAgZXhwZWN0KGFjdGlvbnMucmVxdWVzdE1vdmllRGV0YWlsQWN0aW9uKGlkKSkudG9FcXVhbChcbiAgICAgIHJlcXVlc3RNb3ZpZURldGFpbEFjdGlvbixcbiAgICApO1xuXG4gICAgY29uc3QgcmVxdWVzdE1vdmllRGV0YWlsU3VjY2Vzc0FjdGlvbiA9IHtcbiAgICAgIHR5cGU6IHR5cGVzLlJFUVVFU1RfTU9WSUVfREVUQUlMU19TVUNDRVNTX0FDVElPTixcbiAgICAgIGRhdGE6IG1vdmllLFxuICAgIH07XG4gICAgZXhwZWN0KGFjdGlvbnMucmVxdWVzdE1vdmllRGV0YWlsU3VjY2Vzc0FjdGlvbihtb3ZpZSkpLnRvRXF1YWwoXG4gICAgICByZXF1ZXN0TW92aWVEZXRhaWxTdWNjZXNzQWN0aW9uLFxuICAgICk7XG5cbiAgICBjb25zdCByZXF1ZXN0TW92aWVEZXRhaWxGYWlsZWRBY3Rpb24gPSB7XG4gICAgICB0eXBlOiB0eXBlcy5SRVFVRVNUX01PVklFX0RFVEFJTFNfRkFJTEVEX0FDVElPTixcbiAgICAgIGVycm9yOiBlcnJvcixcbiAgICB9O1xuICAgIGV4cGVjdChhY3Rpb25zLnJlcXVlc3RNb3ZpZURldGFpbEZhaWxlZEFjdGlvbihlcnJvcikpLnRvRXF1YWwoXG4gICAgICByZXF1ZXN0TW92aWVEZXRhaWxGYWlsZWRBY3Rpb24sXG4gICAgKTtcbiAgfSk7XG59KTtcbiJdfQ==