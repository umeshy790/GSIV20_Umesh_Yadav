{"version":3,"sources":["index.ts"],"names":["fetchUpcomingMovies","page","query","dispatch","ActionTypes","requestUpcomingMoviesAction","response","requestUpcomingMoviesSuccessAction","data","isFetchedMore","requestUpcomingMoviesFailedAction","message","fetchMovieDetails","id","requestMovieDetailAction","requestMovieDetailSuccessAction","requestMovieDetailFailedAction"],"mappings":";;;;;;;;;;;AAAA;;AAIA;;AAIO,IAAMA,mBAAmB,GAAG,SAAtBA,mBAAsB,CACjCC,IADiC,EAEjCC,KAFiC;AAAA,SAGX,iBAAOC,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEpBA,YAAAA,QAAQ,CAACC,WAAW,CAACC,2BAAZ,CAAwCJ,IAAxC,CAAD,CAAR;AAFoB;AAAA,8CAGG,0BAAYA,IAAZ,EAAkBC,KAAlB,CAHH;;AAAA;AAGdI,YAAAA,QAHc;AAIpBH,YAAAA,QAAQ,CACNC,WAAW,CAACG,kCAAZ,CAA+C;AAC7CC,cAAAA,IAAI,EAAEF,QADuC;AAE7CG,cAAAA,aAAa,EAAER,IAAI,KAAK;AAFqB,aAA/C,CADM,CAAR;AAJoB;AAAA;;AAAA;AAAA;AAAA;AAWpBE,YAAAA,QAAQ,CAACC,WAAW,CAACM,iCAAZ,CAA8C,YAAIC,OAAlD,CAAD,CAAR;;AAXoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAHW;AAAA,CAA5B;;;;AAkBA,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAACC,EAAD;AAAA,SAAmC,kBAClEV,QADkE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIhEA,YAAAA,QAAQ,CAACC,WAAW,CAACU,wBAAZ,CAAqCD,EAArC,CAAD,CAAR;AAJgE;AAAA,8CAKzC,8BAAgBA,EAAhB,CALyC;;AAAA;AAK1DP,YAAAA,QAL0D;AAMhEH,YAAAA,QAAQ,CAACC,WAAW,CAACW,+BAAZ,CAA4CT,QAA5C,CAAD,CAAR;AANgE;AAAA;;AAAA;AAAA;AAAA;AAQhEH,YAAAA,QAAQ,CAACC,WAAW,CAACY,8BAAZ,CAA2C,aAAIL,OAA/C,CAAD,CAAR;;AARgE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAnC;AAAA,CAA1B","sourcesContent":["import * as ActionTypes from './actions';\nimport {ThunkAction} from 'redux-thunk';\nimport {AnyAction, Dispatch} from 'redux';\nimport {RootState} from '../store';\nimport {getMovieDetails, fetchMovies} from '../service/service';\n\ntype ThunkResult<R> = ThunkAction<R, RootState, undefined, AnyAction>;\n\nexport const fetchUpcomingMovies = (\n  page: number,\n  query?: string,\n): ThunkResult<void> => async (dispatch: Dispatch) => {\n  try {\n    dispatch(ActionTypes.requestUpcomingMoviesAction(page));\n    const response = await fetchMovies(page, query);\n    dispatch(\n      ActionTypes.requestUpcomingMoviesSuccessAction({\n        data: response,\n        isFetchedMore: page !== 1,\n      }),\n    );\n  } catch (err) {\n    dispatch(ActionTypes.requestUpcomingMoviesFailedAction(err.message));\n  }\n};\n\nexport const fetchMovieDetails = (id: number): ThunkResult<void> => async (\n  dispatch: Dispatch,\n) => {\n  try {\n    dispatch(ActionTypes.requestMovieDetailAction(id));\n    const response = await getMovieDetails(id);\n    dispatch(ActionTypes.requestMovieDetailSuccessAction(response));\n  } catch (err) {\n    dispatch(ActionTypes.requestMovieDetailFailedAction(err.message));\n  }\n};\n"]}