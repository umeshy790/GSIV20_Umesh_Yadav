e0e3f778c871100aef71815502946ea7
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _reduxMockStore = _interopRequireDefault(require("redux-mock-store"));

var _reduxThunk = _interopRequireDefault(require("redux-thunk"));

var _fetchMock = _interopRequireDefault(require("fetch-mock"));

var _types = require("../src/types/types");

var _action = require("../src/action");

var middlewares = [_reduxThunk.default];
var mockStore = (0, _reduxMockStore.default)(middlewares);
describe('async actions', function () {
  describe('request upcoming movies thunk test', function () {
    afterEach(function () {
      _fetchMock.default.restore();
    });
    it('requesting movies', function () {
      _fetchMock.default.getOnce('xyzy', {
        body: {
          results: []
        },
        headers: {
          'content-type': 'application/json'
        }
      });

      var expectedActions = [{
        type: _types.REQUEST_UPCOMING_MOVIES_ACTION
      }, {
        type: _types.REQUEST_UPCOMING_MOVIES_SUCCESS_ACTION,
        data: []
      }];
      var store = mockStore({});
      return store.dispatch((0, _action.fetchUpcomingMovies)()).then(function () {
        return expect(store.getActions()).toEqual(expectedActions);
      });
    });
  });
  describe('request detail of movie thunk test', function () {
    var id = 12121;
    afterEach(function () {
      _fetchMock.default.restore();
    });
    it('request movie detail', function () {
      _fetchMock.default.getOnce('', {
        body: {}
      });

      var expectedActions = [{
        type: _types.REQUEST_MOVIE_DETAILS_ACTION,
        id: id
      }, {
        type: _types.REQUEST_MOVIE_DETAILS_SUCCESS_ACTION,
        data: {}
      }];
      var store = mockStore({});
      return store.dispatch((0, _action.fetchMovieDetails)(id)).then(function () {
        return expect(store.getActions()).toEqual(expectedActions);
      });
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzeW5jLWFjdGlvbnMtdGVzdC50cyJdLCJuYW1lcyI6WyJtaWRkbGV3YXJlcyIsInRodW5rIiwibW9ja1N0b3JlIiwiZGVzY3JpYmUiLCJhZnRlckVhY2giLCJmZXRjaE1vY2siLCJyZXN0b3JlIiwiaXQiLCJnZXRPbmNlIiwiYm9keSIsInJlc3VsdHMiLCJoZWFkZXJzIiwiZXhwZWN0ZWRBY3Rpb25zIiwidHlwZSIsIlJFUVVFU1RfVVBDT01JTkdfTU9WSUVTX0FDVElPTiIsIlJFUVVFU1RfVVBDT01JTkdfTU9WSUVTX1NVQ0NFU1NfQUNUSU9OIiwiZGF0YSIsInN0b3JlIiwiZGlzcGF0Y2giLCJ0aGVuIiwiZXhwZWN0IiwiZ2V0QWN0aW9ucyIsInRvRXF1YWwiLCJpZCIsIlJFUVVFU1RfTU9WSUVfREVUQUlMU19BQ1RJT04iLCJSRVFVRVNUX01PVklFX0RFVEFJTFNfU1VDQ0VTU19BQ1RJT04iXSwibWFwcGluZ3MiOiI7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBTUE7O0FBRUEsSUFBTUEsV0FBVyxHQUFHLENBQUNDLG1CQUFELENBQXBCO0FBQ0EsSUFBTUMsU0FBUyxHQUFHLDZCQUFtQkYsV0FBbkIsQ0FBbEI7QUFFQUcsUUFBUSxDQUFDLGVBQUQsRUFBa0IsWUFBTTtBQUM5QkEsRUFBQUEsUUFBUSxDQUFDLG9DQUFELEVBQXVDLFlBQU07QUFDbkRDLElBQUFBLFNBQVMsQ0FBQyxZQUFNO0FBQ2RDLHlCQUFVQyxPQUFWO0FBQ0QsS0FGUSxDQUFUO0FBSUFDLElBQUFBLEVBQUUsQ0FBQyxtQkFBRCxFQUFzQixZQUFNO0FBQzVCRix5QkFBVUcsT0FBVixDQUFrQixNQUFsQixFQUEwQjtBQUN4QkMsUUFBQUEsSUFBSSxFQUFFO0FBQUNDLFVBQUFBLE9BQU8sRUFBRTtBQUFWLFNBRGtCO0FBRXhCQyxRQUFBQSxPQUFPLEVBQUU7QUFBQywwQkFBZ0I7QUFBakI7QUFGZSxPQUExQjs7QUFLQSxVQUFNQyxlQUFlLEdBQUcsQ0FDdEI7QUFBQ0MsUUFBQUEsSUFBSSxFQUFFQztBQUFQLE9BRHNCLEVBRXRCO0FBQUNELFFBQUFBLElBQUksRUFBRUUsNkNBQVA7QUFBK0NDLFFBQUFBLElBQUksRUFBRTtBQUFyRCxPQUZzQixDQUF4QjtBQUtBLFVBQU1DLEtBQUssR0FBR2YsU0FBUyxDQUFDLEVBQUQsQ0FBdkI7QUFFQSxhQUFPZSxLQUFLLENBQ1RDLFFBREksQ0FDSyxrQ0FETCxFQUVKQyxJQUZJLENBRUM7QUFBQSxlQUFNQyxNQUFNLENBQUNILEtBQUssQ0FBQ0ksVUFBTixFQUFELENBQU4sQ0FBMkJDLE9BQTNCLENBQW1DVixlQUFuQyxDQUFOO0FBQUEsT0FGRCxDQUFQO0FBR0QsS0FoQkMsQ0FBRjtBQWlCRCxHQXRCTyxDQUFSO0FBd0JBVCxFQUFBQSxRQUFRLENBQUMsb0NBQUQsRUFBdUMsWUFBTTtBQUNuRCxRQUFNb0IsRUFBVSxHQUFHLEtBQW5CO0FBQ0FuQixJQUFBQSxTQUFTLENBQUMsWUFBTTtBQUNkQyx5QkFBVUMsT0FBVjtBQUNELEtBRlEsQ0FBVDtBQUlBQyxJQUFBQSxFQUFFLENBQUMsc0JBQUQsRUFBeUIsWUFBTTtBQUMvQkYseUJBQVVHLE9BQVYsQ0FBa0IsRUFBbEIsRUFBc0I7QUFDcEJDLFFBQUFBLElBQUksRUFBRTtBQURjLE9BQXRCOztBQUlBLFVBQU1HLGVBQWUsR0FBRyxDQUN0QjtBQUFDQyxRQUFBQSxJQUFJLEVBQUVXLG1DQUFQO0FBQXFDRCxRQUFBQSxFQUFFLEVBQUVBO0FBQXpDLE9BRHNCLEVBRXRCO0FBQUNWLFFBQUFBLElBQUksRUFBRVksMkNBQVA7QUFBNkNULFFBQUFBLElBQUksRUFBRTtBQUFuRCxPQUZzQixDQUF4QjtBQUtBLFVBQU1DLEtBQUssR0FBR2YsU0FBUyxDQUFDLEVBQUQsQ0FBdkI7QUFFQSxhQUFPZSxLQUFLLENBQ1RDLFFBREksQ0FDSywrQkFBa0JLLEVBQWxCLENBREwsRUFFSkosSUFGSSxDQUVDO0FBQUEsZUFBTUMsTUFBTSxDQUFDSCxLQUFLLENBQUNJLFVBQU4sRUFBRCxDQUFOLENBQTJCQyxPQUEzQixDQUFtQ1YsZUFBbkMsQ0FBTjtBQUFBLE9BRkQsQ0FBUDtBQUdELEtBZkMsQ0FBRjtBQWdCRCxHQXRCTyxDQUFSO0FBdUJELENBaERPLENBQVIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY29uZmlndXJlTW9ja1N0b3JlIGZyb20gJ3JlZHV4LW1vY2stc3RvcmUnO1xuaW1wb3J0IHRodW5rIGZyb20gJ3JlZHV4LXRodW5rJztcbmltcG9ydCBmZXRjaE1vY2sgZnJvbSAnZmV0Y2gtbW9jayc7XG5pbXBvcnQge1xuICBSRVFVRVNUX1VQQ09NSU5HX01PVklFU19BQ1RJT04sXG4gIFJFUVVFU1RfVVBDT01JTkdfTU9WSUVTX1NVQ0NFU1NfQUNUSU9OLFxuICBSRVFVRVNUX01PVklFX0RFVEFJTFNfQUNUSU9OLFxuICBSRVFVRVNUX01PVklFX0RFVEFJTFNfU1VDQ0VTU19BQ1RJT04sXG59IGZyb20gJy4uL3NyYy90eXBlcy90eXBlcyc7XG5pbXBvcnQge2ZldGNoVXBjb21pbmdNb3ZpZXMsIGZldGNoTW92aWVEZXRhaWxzfSBmcm9tICcuLi9zcmMvYWN0aW9uJztcblxuY29uc3QgbWlkZGxld2FyZXMgPSBbdGh1bmtdO1xuY29uc3QgbW9ja1N0b3JlID0gY29uZmlndXJlTW9ja1N0b3JlKG1pZGRsZXdhcmVzKTtcblxuZGVzY3JpYmUoJ2FzeW5jIGFjdGlvbnMnLCAoKSA9PiB7XG4gIGRlc2NyaWJlKCdyZXF1ZXN0IHVwY29taW5nIG1vdmllcyB0aHVuayB0ZXN0JywgKCkgPT4ge1xuICAgIGFmdGVyRWFjaCgoKSA9PiB7XG4gICAgICBmZXRjaE1vY2sucmVzdG9yZSgpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3JlcXVlc3RpbmcgbW92aWVzJywgKCkgPT4ge1xuICAgICAgZmV0Y2hNb2NrLmdldE9uY2UoJ3h5enknLCB7XG4gICAgICAgIGJvZHk6IHtyZXN1bHRzOiBbXX0sXG4gICAgICAgIGhlYWRlcnM6IHsnY29udGVudC10eXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nfSxcbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCBleHBlY3RlZEFjdGlvbnMgPSBbXG4gICAgICAgIHt0eXBlOiBSRVFVRVNUX1VQQ09NSU5HX01PVklFU19BQ1RJT059LFxuICAgICAgICB7dHlwZTogUkVRVUVTVF9VUENPTUlOR19NT1ZJRVNfU1VDQ0VTU19BQ1RJT04sIGRhdGE6IFtdfSxcbiAgICAgIF07XG5cbiAgICAgIGNvbnN0IHN0b3JlID0gbW9ja1N0b3JlKHt9KTtcblxuICAgICAgcmV0dXJuIHN0b3JlXG4gICAgICAgIC5kaXNwYXRjaChmZXRjaFVwY29taW5nTW92aWVzKCkpXG4gICAgICAgIC50aGVuKCgpID0+IGV4cGVjdChzdG9yZS5nZXRBY3Rpb25zKCkpLnRvRXF1YWwoZXhwZWN0ZWRBY3Rpb25zKSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdyZXF1ZXN0IGRldGFpbCBvZiBtb3ZpZSB0aHVuayB0ZXN0JywgKCkgPT4ge1xuICAgIGNvbnN0IGlkOiBudW1iZXIgPSAxMjEyMTtcbiAgICBhZnRlckVhY2goKCkgPT4ge1xuICAgICAgZmV0Y2hNb2NrLnJlc3RvcmUoKTtcbiAgICB9KTtcblxuICAgIGl0KCdyZXF1ZXN0IG1vdmllIGRldGFpbCcsICgpID0+IHtcbiAgICAgIGZldGNoTW9jay5nZXRPbmNlKCcnLCB7XG4gICAgICAgIGJvZHk6IHt9LFxuICAgICAgfSk7XG5cbiAgICAgIGNvbnN0IGV4cGVjdGVkQWN0aW9ucyA9IFtcbiAgICAgICAge3R5cGU6IFJFUVVFU1RfTU9WSUVfREVUQUlMU19BQ1RJT04sIGlkOiBpZH0sXG4gICAgICAgIHt0eXBlOiBSRVFVRVNUX01PVklFX0RFVEFJTFNfU1VDQ0VTU19BQ1RJT04sIGRhdGE6IHt9fSxcbiAgICAgIF07XG5cbiAgICAgIGNvbnN0IHN0b3JlID0gbW9ja1N0b3JlKHt9KTtcblxuICAgICAgcmV0dXJuIHN0b3JlXG4gICAgICAgIC5kaXNwYXRjaChmZXRjaE1vdmllRGV0YWlscyhpZCkpXG4gICAgICAgIC50aGVuKCgpID0+IGV4cGVjdChzdG9yZS5nZXRBY3Rpb25zKCkpLnRvRXF1YWwoZXhwZWN0ZWRBY3Rpb25zKSk7XG4gICAgfSk7XG4gIH0pO1xufSk7XG4iXX0=