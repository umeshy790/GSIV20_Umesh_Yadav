{"version":3,"sources":["GestureButtons.js"],"names":["RawButton","GestureHandlerButton","shouldCancelWhenOutside","shouldActivateOnStart","BaseButton","props","_handleEvent","nativeEvent","state","oldState","pointerInside","active","State","ACTIVE","_lastActive","onActiveStateChange","CANCELLED","onPress","_onHandlerStateChange","e","onHandlerStateChange","_onGestureEvent","onGestureEvent","style","rippleColor","rest","overflow","React","Component","propTypes","PropTypes","func","AnimatedBaseButton","Animated","createAnimatedComponent","btnStyles","StyleSheet","create","underlay","position","left","right","bottom","top","RectButton","_onActiveStateChange","Platform","OS","_opacity","setValue","activeOpacity","Value","children","opacity","backgroundColor","underlayColor","defaultProps","BorderlessButton","borderless","bool"],"mappings":"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","sourcesContent":["import PropTypes from 'prop-types';\nimport React from 'react';\nimport { Animated, Platform, processColor, StyleSheet } from 'react-native';\n\nimport createNativeWrapper from './createNativeWrapper';\nimport GestureHandlerButton from './GestureHandlerButton';\nimport State from './State';\n\nexport const RawButton = createNativeWrapper(GestureHandlerButton, {\n  shouldCancelWhenOutside: false,\n  shouldActivateOnStart: false,\n});\n\n/* Buttons */\n\nexport class BaseButton extends React.Component {\n  static propTypes = {\n    ...RawButton.propTypes,\n    onPress: PropTypes.func,\n    onActiveStateChange: PropTypes.func,\n  };\n\n  constructor(props) {\n    super(props);\n    this._lastActive = false;\n  }\n\n  _handleEvent = ({ nativeEvent }) => {\n    const { state, oldState, pointerInside } = nativeEvent;\n    const active = pointerInside && state === State.ACTIVE;\n\n    if (active !== this._lastActive && this.props.onActiveStateChange) {\n      this.props.onActiveStateChange(active);\n    }\n\n    if (\n      oldState === State.ACTIVE &&\n      state !== State.CANCELLED &&\n      this._lastActive &&\n      this.props.onPress\n    ) {\n      this.props.onPress(active);\n    }\n\n    this._lastActive = active;\n  };\n\n  // Normally, the parent would execute it's handler first,\n  // then forward the event to listeners. However, here our handler\n  // is virtually only forwarding events to listeners, so we reverse the order\n  // to keep the proper order of the callbacks (from \"raw\" ones to \"processed\").\n  _onHandlerStateChange = e => {\n    this.props.onHandlerStateChange && this.props.onHandlerStateChange(e);\n    this._handleEvent(e);\n  };\n\n  _onGestureEvent = e => {\n    this.props.onGestureEvent && this.props.onGestureEvent(e);\n    this._handleEvent(e);\n  };\n\n  render() {\n    const { style, rippleColor, ...rest } = this.props;\n\n    return (\n      <RawButton\n        style={[{ overflow: 'hidden' }, style]}\n        rippleColor={processColor(rippleColor)}\n        {...rest}\n        onGestureEvent={this._onGestureEvent}\n        onHandlerStateChange={this._onHandlerStateChange}\n      />\n    );\n  }\n}\n\nconst AnimatedBaseButton = Animated.createAnimatedComponent(BaseButton);\n\nconst btnStyles = StyleSheet.create({\n  underlay: {\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    bottom: 0,\n    top: 0,\n  },\n});\n\nexport class RectButton extends React.Component {\n  static propTypes = BaseButton.propTypes;\n\n  static defaultProps = {\n    activeOpacity: 0.105,\n    underlayColor: 'black',\n  };\n\n  constructor(props) {\n    super(props);\n    this._opacity = new Animated.Value(0);\n  }\n\n  _onActiveStateChange = active => {\n    if (Platform.OS !== 'android') {\n      this._opacity.setValue(active ? this.props.activeOpacity : 0);\n    }\n\n    this.props.onActiveStateChange && this.props.onActiveStateChange(active);\n  };\n\n  render() {\n    const { children, ...rest } = this.props;\n\n    return (\n      <BaseButton {...rest} onActiveStateChange={this._onActiveStateChange}>\n        <Animated.View\n          style={[\n            btnStyles.underlay,\n            { opacity: this._opacity },\n            { backgroundColor: this.props.underlayColor },\n          ]}\n        />\n        {children}\n      </BaseButton>\n    );\n  }\n}\n\nexport class BorderlessButton extends React.Component {\n  static propTypes = {\n    ...BaseButton.propTypes,\n    borderless: PropTypes.bool,\n  };\n\n  static defaultProps = {\n    activeOpacity: 0.3,\n    borderless: true,\n  };\n\n  constructor(props) {\n    super(props);\n    this._opacity = new Animated.Value(1);\n  }\n\n  _onActiveStateChange = active => {\n    if (Platform.OS !== 'android') {\n      this._opacity.setValue(active ? this.props.activeOpacity : 1);\n    }\n\n    this.props.onActiveStateChange && this.props.onActiveStateChange(active);\n  };\n\n  render() {\n    const { children, style, ...rest } = this.props;\n\n    return (\n      <AnimatedBaseButton\n        {...rest}\n        onActiveStateChange={this._onActiveStateChange}\n        style={[style, Platform.OS === 'ios' && { opacity: this._opacity }]}>\n        {children}\n      </AnimatedBaseButton>\n    );\n  }\n}\n\nexport { default as PureNativeButton } from './GestureHandlerButton';\n"]}