{"version":3,"sources":["index.ts"],"names":["fetchUpcomingMovies","dispatch","response","message"],"mappings":";;;;;;;;;AAAA;;AAQA;;AAIO,IAAMA,mBAAsC,GAAG,SAAzCA,mBAAyC;AAAA,SAAM,iBAC1DC,QAD0D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIxDA,YAAAA,QAAQ,CAAC,2CAAD,CAAR;AAJwD;AAAA,8CAKjC,iCALiC;;AAAA;AAKlDC,YAAAA,QALkD;AAMxDD,YAAAA,QAAQ,CAAC,iDAAmCC,QAAnC,CAAD,CAAR;AANwD;AAAA;;AAAA;AAAA;AAAA;AAQxDD,YAAAA,QAAQ,CAAC,gDAAkC,YAAIE,OAAtC,CAAD,CAAR;;AARwD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAN;AAAA,CAA/C","sourcesContent":["import {\n  requestUpcomingMoviesSuccessAction,\n  requestUpcomingMoviesAction,\n  requestUpcomingMoviesFailedAction,\n} from './actions';\nimport {ThunkAction} from 'redux-thunk';\nimport {AnyAction, Dispatch} from 'redux';\nimport {RootState} from '../store';\nimport {getUpcomingMovies} from '../service/service';\n\ntype ThunkResult<R> = ThunkAction<R, RootState, undefined, AnyAction>;\n\nexport const fetchUpcomingMovies: ThunkResult<void> = () => async (\n  dispatch: Dispatch,\n) => {\n  try {\n    dispatch(requestUpcomingMoviesAction());\n    const response = await getUpcomingMovies();\n    dispatch(requestUpcomingMoviesSuccessAction(response));\n  } catch (err) {\n    dispatch(requestUpcomingMoviesFailedAction(err.message));\n  }\n};\n"]}