{"version":3,"sources":["service.ts"],"names":["BASE_URL","key","controller","AbortController","isRequestPending","fetchMovies","page","query","upcomingMoviespath","searchMoviePath","encodeURIComponent","abort","fetch","signal","then","res","json","results","catch","err","console","log","getMovieDetails","id"],"mappings":";;;;;AAAA,IAAMA,QAAQ,GAAG,8BAAjB;AACA,IAAMC,GAAG,GAAG,kCAAZ;AAEA,IAAIC,UAAU,GAAG,IAAIC,eAAJ,EAAjB;AACA,IAAIC,gBAAyB,GAAG,KAAhC;;AAEO,SAASC,WAAT,CAAqBC,IAArB,EAAmCC,KAAnC,EAAkD;AACvD,MAAMC,kBAAkB,GAAMR,QAAN,gCAAyCC,GAAzC,cAAqDK,IAA7E;AACA,MAAMG,eAAe,GAAMT,QAAN,8BAAuCC,GAAvC,eAAoDS,kBAAkB,CACzFH,KADyF,CAAtE,cAEXD,IAFV;;AAIA,MAAIF,gBAAJ,EAAsB;AACpBF,IAAAA,UAAU,CAACS,KAAX;AACAT,IAAAA,UAAU,GAAG,IAAIC,eAAJ,EAAb;AACD;;AACDC,EAAAA,gBAAgB,GAAG,IAAnB;AAEA,SAAOQ,KAAK,CAACL,KAAK,GAAGE,eAAH,GAAqBD,kBAA3B,EAA+C;AACzDK,IAAAA,MAAM,EAAEX,UAAU,CAACW;AADsC,GAA/C,CAAL,CAGJC,IAHI,CAGC,UAAAC,GAAG;AAAA,WAAIA,GAAG,CAACC,IAAJ,EAAJ;AAAA,GAHJ,EAIJF,IAJI,CAIC,UAAAE,IAAI,EAAI;AACZZ,IAAAA,gBAAgB,GAAG,KAAnB;AACA,WAAOY,IAAI,CAACC,OAAZ;AACD,GAPI,EAQJC,KARI,CAQE,UAAAC,GAAG,EAAI;AACZf,IAAAA,gBAAgB,GAAG,KAAnB;AACAgB,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACD,GAXI,CAAP;AAYD;;AAEM,IAAMG,eAAe,GAAG,SAAlBA,eAAkB,CAACC,EAAD;AAAA,SAC7BX,KAAK,CAAIZ,QAAJ,eAAsBuB,EAAtB,iBAAoCtB,GAApC,CAAL,CACGa,IADH,CACQ,UAAAC,GAAG;AAAA,WAAIA,GAAG,CAACC,IAAJ,EAAJ;AAAA,GADX,EAEGF,IAFH,CAEQ,UAAAE,IAAI;AAAA,WAAIA,IAAJ;AAAA,GAFZ,CAD6B;AAAA,CAAxB","sourcesContent":["const BASE_URL = 'https://api.themoviedb.org/3';\nconst key = 'b3a72b722e11795c7179cc928980a9e2';\n\nlet controller = new AbortController();\nlet isRequestPending: boolean = false;\n\nexport function fetchMovies(page: number, query: string) {\n  const upcomingMoviespath = `${BASE_URL}/movie/upcoming?api_key=${key}&page=${page}`;\n  const searchMoviePath = `${BASE_URL}/search/movie?api_key=${key}&query=${encodeURIComponent(\n    query,\n  )}&page=${page}`;\n\n  if (isRequestPending) {\n    controller.abort();\n    controller = new AbortController();\n  }\n  isRequestPending = true;\n\n  return fetch(query ? searchMoviePath : upcomingMoviespath, {\n    signal: controller.signal,\n  })\n    .then(res => res.json())\n    .then(json => {\n      isRequestPending = false;\n      return json.results;\n    })\n    .catch(err => {\n      isRequestPending = false;\n      console.log(err);\n    });\n}\n\nexport const getMovieDetails = (id: number) =>\n  fetch(`${BASE_URL}/movie/${id}?api_key=${key}`)\n    .then(res => res.json())\n    .then(json => json);\n\n// export const searchMovies = async (query: string, page: number) => {\n//   if (isRequestPending) {\n//     controller.abort();\n//   }\n//   try {\n//     isRequestPending = true;\n//     const res = await fetch(\n//       `${BASE_URL}/search/movie?api_key=${key}&query=${encodeURIComponent(\n//         query,\n//       )}&page=${page}`,\n//       {\n//         signal: controller.signal,\n//       },\n//     );\n//     const json = await res.json();\n//     isRequestPending = false;\n//     return json.results;\n//   } catch (err) {\n//     isRequestPending = false;u\n//     console.log(err);\n//   }\n// };\n"]}