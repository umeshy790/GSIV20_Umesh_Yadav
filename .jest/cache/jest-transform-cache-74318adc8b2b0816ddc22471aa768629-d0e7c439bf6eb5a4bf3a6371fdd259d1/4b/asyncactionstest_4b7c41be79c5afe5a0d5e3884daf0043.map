{"version":3,"sources":["async-actions-test.ts"],"names":["middlewares","thunk","mockStore","describe","afterEach","fetchMock","restore","it","getOnce","body","headers","expectedActions","type","types","REQUEST_UPCOMING_MOVIES_ACTION","REQUEST_UPCOMING_MOVIES_SUCCESS_ACTION","store","todos","dispatch","then","getActions","toEqual"],"mappings":";;;;AAAA;;AAGA;;AACA;;AAEA;;AACA;;AACA;;AAEA,IAAMA,WAAW,GAAG,CAACC,mBAAD,CAApB;AACA,IAAMC,SAAS,GAAG,6BAAmBF,WAAnB,CAAlB;AAEAG,QAAQ,CAAC,eAAD,EAAkB,YAAM;AAC9BC,EAAAA,SAAS,CAAC,YAAM;AACdC,uBAAUC,OAAV;AACD,GAFQ,CAAT;AAIAC,EAAAA,EAAE,CAAC,6CAAD,EAAgD,YAAM;AACtDF,uBAAUG,OAAV,CAAkB,SAAlB,EAA6B;AAC3BC,MAAAA,IAAI,EAAE,EADqB;AAE3BC,MAAAA,OAAO,EAAE;AAAC,wBAAgB;AAAjB;AAFkB,KAA7B;;AAKA,QAAMC,eAAe,GAAG,CACtB;AAACC,MAAAA,IAAI,EAAEC,KAAK,CAACC;AAAb,KADsB,EAEtB;AACEF,MAAAA,IAAI,EAAEC,KAAK,CAACE,sCADd;AAEEN,MAAAA,IAAI,EAAE;AAFR,KAFsB,CAAxB;AAOA,QAAMO,KAAK,GAAGd,SAAS,CAAC;AAACe,MAAAA,KAAK,EAAE;AAAR,KAAD,CAAvB;AAEA,WAAOD,KAAK,CAACE,QAAN,CAAe,kCAAf,EAAsCC,IAAtC,CAA2C,YAAM;AAEtD,2BAAOH,KAAK,CAACI,UAAN,EAAP,EAA2BC,OAA3B,CAAmCV,eAAnC;AACD,KAHM,CAAP;AAID,GAnBC,CAAF;AAoBD,CAzBO,CAAR","sourcesContent":["import * as types from '../src/types/types';\nimport * as actions from '../src/action/actions';\n\nimport configureMockStore from 'redux-mock-store';\nimport thunk from 'redux-thunk';\n\nimport fetchMock from 'fetch-mock';\nimport expect from 'expect'; // You can use any testing library\nimport {fetchUpcomingMovies} from '../src/action';\n\nconst middlewares = [thunk];\nconst mockStore = configureMockStore(middlewares);\n\ndescribe('async actions', () => {\n  afterEach(() => {\n    fetchMock.restore();\n  });\n\n  it('creates actions when fetching has been done', () => {\n    fetchMock.getOnce('/movies', {\n      body: [],\n      headers: {'content-type': 'application/json'},\n    });\n\n    const expectedActions = [\n      {type: types.REQUEST_UPCOMING_MOVIES_ACTION},\n      {\n        type: types.REQUEST_UPCOMING_MOVIES_SUCCESS_ACTION,\n        body: [],\n      },\n    ];\n    const store = mockStore({todos: []});\n\n    return store.dispatch(fetchUpcomingMovies()).then(() => {\n      // return of async actions\n      expect(store.getActions()).toEqual(expectedActions);\n    });\n  });\n});\n"]}