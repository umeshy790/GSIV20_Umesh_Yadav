{"version":3,"sources":["actions-test.ts"],"names":["describe","it","error","movies","movie","id","requestUpcomingMovieAction","type","types","REQUEST_UPCOMING_MOVIES_ACTION","expect","actions","requestUpcomingMoviesAction","toEqual","requestUpcomingMovieSuccessAction","REQUEST_UPCOMING_MOVIES_SUCCESS_ACTION","data","requestUpcomingMoviesSuccessAction","requestUpcomingMovieFailedAction","REQUEST_UPCOMING_MOVIES_FAILED_ACTION","requestUpcomingMoviesFailedAction","requestMovieDetailAction","REQUEST_MOVIE_DETAILS_ACTION","requestMovieDetailSuccessAction","REQUEST_MOVIE_DETAILS_SUCCESS_ACTION","requestMovieDetailFailedAction","REQUEST_MOVIE_DETAILS_FAILED_ACTION"],"mappings":";;AAAA;;AACA;;AAGAA,QAAQ,CAAC,SAAD,EAAY,YAAM;AACxBC,EAAAA,EAAE,CAAC,yBAAD,EAA4B,YAAM;AAClC,QAAMC,KAAa,GAAG,YAAtB;AACA,QAAMC,MAAe,GAAG,EAAxB;AACA,QAAMC,KAAY,GAAG,IAArB;AACA,QAAMC,EAAU,GAAG,IAAnB;AAEA,QAAMC,0BAA0B,GAAG;AACjCC,MAAAA,IAAI,EAAEC,KAAK,CAACC;AADqB,KAAnC;AAGAC,IAAAA,MAAM,CAACC,OAAO,CAACC,2BAAR,EAAD,CAAN,CAA8CC,OAA9C,CACEP,0BADF;AAIA,QAAMQ,iCAAiC,GAAG;AACxCP,MAAAA,IAAI,EAAEC,KAAK,CAACO,sCAD4B;AAExCC,MAAAA,IAAI,EAAEb;AAFkC,KAA1C;AAIAO,IAAAA,MAAM,CAACC,OAAO,CAACM,kCAAR,CAA2Cd,MAA3C,CAAD,CAAN,CAA2DU,OAA3D,CACEC,iCADF;AAIA,QAAMI,gCAAgC,GAAG;AACvCX,MAAAA,IAAI,EAAEC,KAAK,CAACW,qCAD2B;AAEvCjB,MAAAA,KAAK,EAALA;AAFuC,KAAzC;AAIAQ,IAAAA,MAAM,CAACC,OAAO,CAACS,iCAAR,CAA0ClB,KAA1C,CAAD,CAAN,CAAyDW,OAAzD,CACEK,gCADF;AAIA,QAAMG,wBAAwB,GAAG;AAC/Bd,MAAAA,IAAI,EAAEC,KAAK,CAACc,4BADmB;AAE/BjB,MAAAA,EAAE,EAAEA;AAF2B,KAAjC;AAIAK,IAAAA,MAAM,CAACC,OAAO,CAACU,wBAAR,CAAiChB,EAAjC,CAAD,CAAN,CAA6CQ,OAA7C,CACEQ,wBADF;AAIA,QAAME,+BAA+B,GAAG;AACtChB,MAAAA,IAAI,EAAEC,KAAK,CAACgB,oCAD0B;AAEtCR,MAAAA,IAAI,EAAEZ;AAFgC,KAAxC;AAIAM,IAAAA,MAAM,CAACC,OAAO,CAACY,+BAAR,CAAwCnB,KAAxC,CAAD,CAAN,CAAuDS,OAAvD,CACEU,+BADF;AAIA,QAAME,8BAA8B,GAAG;AACrClB,MAAAA,IAAI,EAAEC,KAAK,CAACkB,mCADyB;AAErCxB,MAAAA,KAAK,EAAEA;AAF8B,KAAvC;AAIAQ,IAAAA,MAAM,CAACC,OAAO,CAACc,8BAAR,CAAuCvB,KAAvC,CAAD,CAAN,CAAsDW,OAAtD,CACEY,8BADF;AAGD,GApDC,CAAF;AAqDD,CAtDO,CAAR","sourcesContent":["import * as types from '../src/types/types';\nimport * as actions from '../src/action/actions';\nimport {Movie} from '../src/modal/modals';\n\ndescribe('actions', () => {\n  it('should create a actions', () => {\n    const error: string = 'Some error';\n    const movies: Movie[] = [];\n    const movie: Movie = null;\n    const id: number = 1212;\n\n    const requestUpcomingMovieAction = {\n      type: types.REQUEST_UPCOMING_MOVIES_ACTION,\n    };\n    expect(actions.requestUpcomingMoviesAction()).toEqual(\n      requestUpcomingMovieAction,\n    );\n\n    const requestUpcomingMovieSuccessAction = {\n      type: types.REQUEST_UPCOMING_MOVIES_SUCCESS_ACTION,\n      data: movies,\n    };\n    expect(actions.requestUpcomingMoviesSuccessAction(movies)).toEqual(\n      requestUpcomingMovieSuccessAction,\n    );\n\n    const requestUpcomingMovieFailedAction = {\n      type: types.REQUEST_UPCOMING_MOVIES_FAILED_ACTION,\n      error,\n    };\n    expect(actions.requestUpcomingMoviesFailedAction(error)).toEqual(\n      requestUpcomingMovieFailedAction,\n    );\n\n    const requestMovieDetailAction = {\n      type: types.REQUEST_MOVIE_DETAILS_ACTION,\n      id: id,\n    };\n    expect(actions.requestMovieDetailAction(id)).toEqual(\n      requestMovieDetailAction,\n    );\n\n    const requestMovieDetailSuccessAction = {\n      type: types.REQUEST_MOVIE_DETAILS_SUCCESS_ACTION,\n      data: movie,\n    };\n    expect(actions.requestMovieDetailSuccessAction(movie)).toEqual(\n      requestMovieDetailSuccessAction,\n    );\n\n    const requestMovieDetailFailedAction = {\n      type: types.REQUEST_MOVIE_DETAILS_FAILED_ACTION,\n      error: error,\n    };\n    expect(actions.requestMovieDetailFailedAction(error)).toEqual(\n      requestMovieDetailFailedAction,\n    );\n  });\n});\n"]}