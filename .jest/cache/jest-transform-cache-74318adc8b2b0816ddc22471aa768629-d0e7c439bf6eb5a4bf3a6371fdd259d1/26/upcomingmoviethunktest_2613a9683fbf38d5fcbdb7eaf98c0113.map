{"version":3,"sources":["upcoming-movie-thunk-test.ts"],"names":["middlewares","thunk","mockStore","describe","afterEach","fetchMock","restore","it","getOnce","body","results","headers","expectedActions","type","REQUEST_UPCOMING_MOVIES_ACTION","REQUEST_UPCOMING_MOVIES_SUCCESS_ACTION","data","store","dispatch","then","expect","getActions","toEqual"],"mappings":";;AAAA;;AACA;;AACA;;AACA;;AAIA;;AAEA,IAAMA,WAAW,GAAG,CAACC,mBAAD,CAApB;AACA,IAAMC,SAAS,GAAG,6BAAmBF,WAAnB,CAAlB;AAEAG,QAAQ,CAAC,eAAD,EAAkB,YAAM;AAC9BA,EAAAA,QAAQ,CAAC,eAAD,EAAkB,YAAM;AAC9BC,IAAAA,SAAS,CAAC,YAAM;AACdC,yBAAUC,OAAV;AACD,KAFQ,CAAT;AAIAC,IAAAA,EAAE,CAAC,mBAAD,EAAsB,YAAM;AAC5BF,yBAAUG,OAAV,CAAkB,SAAlB,EAA6B;AAC3BC,QAAAA,IAAI,EAAE;AAACC,UAAAA,OAAO,EAAE;AAAV,SADqB;AAE3BC,QAAAA,OAAO,EAAE;AAAC,0BAAgB;AAAjB;AAFkB,OAA7B;;AAKA,UAAMC,eAAe,GAAG,CACtB;AAACC,QAAAA,IAAI,EAAEC;AAAP,OADsB,EAEtB;AAACD,QAAAA,IAAI,EAAEE,6CAAP;AAA+CC,QAAAA,IAAI,EAAE;AAArD,OAFsB,CAAxB;AAKA,UAAMC,KAAK,GAAGf,SAAS,CAAC,EAAD,CAAvB;AAEA,aAAOe,KAAK,CACTC,QADI,CACK,kCADL,EAEJC,IAFI,CAEC;AAAA,eAAMC,MAAM,CAACH,KAAK,CAACI,UAAN,EAAD,CAAN,CAA2BC,OAA3B,CAAmCV,eAAnC,CAAN;AAAA,OAFD,CAAP;AAGD,KAhBC,CAAF;AAiBD,GAtBO,CAAR;AAuBD,CAxBO,CAAR","sourcesContent":["import configureMockStore from 'redux-mock-store';\nimport thunk from 'redux-thunk';\nimport fetchMock from 'fetch-mock';\nimport {\n  REQUEST_UPCOMING_MOVIES_ACTION,\n  REQUEST_UPCOMING_MOVIES_SUCCESS_ACTION,\n} from '../src/types/types';\nimport {fetchUpcomingMovies} from '../src/action';\n\nconst middlewares = [thunk];\nconst mockStore = configureMockStore(middlewares);\n\ndescribe('async actions', () => {\n  describe('async actions', () => {\n    afterEach(() => {\n      fetchMock.restore();\n    });\n\n    it('requesting movies', () => {\n      fetchMock.getOnce('/movies', {\n        body: {results: []},\n        headers: {'content-type': 'application/json'},\n      });\n\n      const expectedActions = [\n        {type: REQUEST_UPCOMING_MOVIES_ACTION},\n        {type: REQUEST_UPCOMING_MOVIES_SUCCESS_ACTION, data: []},\n      ];\n\n      const store = mockStore({});\n\n      return store\n        .dispatch(fetchUpcomingMovies())\n        .then(() => expect(store.getActions()).toEqual(expectedActions));\n    });\n  });\n});\n"]}