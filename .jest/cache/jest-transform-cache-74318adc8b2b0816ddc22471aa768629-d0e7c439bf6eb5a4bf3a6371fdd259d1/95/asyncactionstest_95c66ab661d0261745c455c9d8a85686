1391fc4e251f5f8fc948fe1d7c21acaf
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _reduxMockStore = _interopRequireDefault(require("redux-mock-store"));

var _reduxThunk = _interopRequireDefault(require("redux-thunk"));

var _fetchMock = _interopRequireDefault(require("fetch-mock"));

var _types = require("../src/types/types");

var _action = require("../src/action");

var middlewares = [_reduxThunk.default];
var mockStore = (0, _reduxMockStore.default)(middlewares);
describe('async actions', function () {
  afterEach(function () {
    _fetchMock.default.restore();
  });
  describe('request upcoming movies thunk test', function () {
    it('requesting movies', function () {
      _fetchMock.default.getOnce('', {
        body: {
          results: []
        },
        headers: {
          'content-type': 'application/json'
        }
      });

      var expectedActions = [{
        type: _types.REQUEST_UPCOMING_MOVIES_ACTION
      }, {
        type: _types.REQUEST_UPCOMING_MOVIES_SUCCESS_ACTION,
        data: []
      }];
      var store = mockStore({});
      return store.dispatch((0, _action.fetchUpcomingMovies)()).then(function () {
        return expect(store.getActions()).toEqual(expectedActions);
      });
    });
  });
  describe('request detail of movie thunk test', function () {
    var id = 12121;
    afterEach(function () {
      _fetchMock.default.restore();
    });
    it('request movie detail', function () {
      _fetchMock.default.getOnce('', {
        body: {}
      });

      var expectedActions = [{
        type: _types.REQUEST_MOVIE_DETAILS_ACTION,
        id: id
      }, {
        type: _types.REQUEST_MOVIE_DETAILS_SUCCESS_ACTION,
        data: {}
      }];
      var store = mockStore({});
      return store.dispatch((0, _action.fetchMovieDetails)(id)).then(function () {
        return expect(store.getActions()).toEqual(expectedActions);
      });
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzeW5jLWFjdGlvbnMtdGVzdC50cyJdLCJuYW1lcyI6WyJtaWRkbGV3YXJlcyIsInRodW5rIiwibW9ja1N0b3JlIiwiZGVzY3JpYmUiLCJhZnRlckVhY2giLCJmZXRjaE1vY2siLCJyZXN0b3JlIiwiaXQiLCJnZXRPbmNlIiwiYm9keSIsInJlc3VsdHMiLCJoZWFkZXJzIiwiZXhwZWN0ZWRBY3Rpb25zIiwidHlwZSIsIlJFUVVFU1RfVVBDT01JTkdfTU9WSUVTX0FDVElPTiIsIlJFUVVFU1RfVVBDT01JTkdfTU9WSUVTX1NVQ0NFU1NfQUNUSU9OIiwiZGF0YSIsInN0b3JlIiwiZGlzcGF0Y2giLCJ0aGVuIiwiZXhwZWN0IiwiZ2V0QWN0aW9ucyIsInRvRXF1YWwiLCJpZCIsIlJFUVVFU1RfTU9WSUVfREVUQUlMU19BQ1RJT04iLCJSRVFVRVNUX01PVklFX0RFVEFJTFNfU1VDQ0VTU19BQ1RJT04iXSwibWFwcGluZ3MiOiI7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBTUE7O0FBRUEsSUFBTUEsV0FBVyxHQUFHLENBQUNDLG1CQUFELENBQXBCO0FBQ0EsSUFBTUMsU0FBUyxHQUFHLDZCQUFtQkYsV0FBbkIsQ0FBbEI7QUFFQUcsUUFBUSxDQUFDLGVBQUQsRUFBa0IsWUFBTTtBQUM5QkMsRUFBQUEsU0FBUyxDQUFDLFlBQU07QUFDZEMsdUJBQVVDLE9BQVY7QUFDRCxHQUZRLENBQVQ7QUFJQUgsRUFBQUEsUUFBUSxDQUFDLG9DQUFELEVBQXVDLFlBQU07QUFDbkRJLElBQUFBLEVBQUUsQ0FBQyxtQkFBRCxFQUFzQixZQUFNO0FBQzVCRix5QkFBVUcsT0FBVixDQUFrQixFQUFsQixFQUFzQjtBQUNwQkMsUUFBQUEsSUFBSSxFQUFFO0FBQUNDLFVBQUFBLE9BQU8sRUFBRTtBQUFWLFNBRGM7QUFFcEJDLFFBQUFBLE9BQU8sRUFBRTtBQUFDLDBCQUFnQjtBQUFqQjtBQUZXLE9BQXRCOztBQUtBLFVBQU1DLGVBQWUsR0FBRyxDQUN0QjtBQUFDQyxRQUFBQSxJQUFJLEVBQUVDO0FBQVAsT0FEc0IsRUFFdEI7QUFBQ0QsUUFBQUEsSUFBSSxFQUFFRSw2Q0FBUDtBQUErQ0MsUUFBQUEsSUFBSSxFQUFFO0FBQXJELE9BRnNCLENBQXhCO0FBS0EsVUFBTUMsS0FBSyxHQUFHZixTQUFTLENBQUMsRUFBRCxDQUF2QjtBQUVBLGFBQU9lLEtBQUssQ0FDVEMsUUFESSxDQUNLLGtDQURMLEVBRUpDLElBRkksQ0FFQztBQUFBLGVBQU1DLE1BQU0sQ0FBQ0gsS0FBSyxDQUFDSSxVQUFOLEVBQUQsQ0FBTixDQUEyQkMsT0FBM0IsQ0FBbUNWLGVBQW5DLENBQU47QUFBQSxPQUZELENBQVA7QUFHRCxLQWhCQyxDQUFGO0FBaUJELEdBbEJPLENBQVI7QUFvQkFULEVBQUFBLFFBQVEsQ0FBQyxvQ0FBRCxFQUF1QyxZQUFNO0FBQ25ELFFBQU1vQixFQUFVLEdBQUcsS0FBbkI7QUFDQW5CLElBQUFBLFNBQVMsQ0FBQyxZQUFNO0FBQ2RDLHlCQUFVQyxPQUFWO0FBQ0QsS0FGUSxDQUFUO0FBSUFDLElBQUFBLEVBQUUsQ0FBQyxzQkFBRCxFQUF5QixZQUFNO0FBQy9CRix5QkFBVUcsT0FBVixDQUFrQixFQUFsQixFQUFzQjtBQUNwQkMsUUFBQUEsSUFBSSxFQUFFO0FBRGMsT0FBdEI7O0FBSUEsVUFBTUcsZUFBZSxHQUFHLENBQ3RCO0FBQUNDLFFBQUFBLElBQUksRUFBRVcsbUNBQVA7QUFBcUNELFFBQUFBLEVBQUUsRUFBRUE7QUFBekMsT0FEc0IsRUFFdEI7QUFBQ1YsUUFBQUEsSUFBSSxFQUFFWSwyQ0FBUDtBQUE2Q1QsUUFBQUEsSUFBSSxFQUFFO0FBQW5ELE9BRnNCLENBQXhCO0FBS0EsVUFBTUMsS0FBSyxHQUFHZixTQUFTLENBQUMsRUFBRCxDQUF2QjtBQUVBLGFBQU9lLEtBQUssQ0FDVEMsUUFESSxDQUNLLCtCQUFrQkssRUFBbEIsQ0FETCxFQUVKSixJQUZJLENBRUM7QUFBQSxlQUFNQyxNQUFNLENBQUNILEtBQUssQ0FBQ0ksVUFBTixFQUFELENBQU4sQ0FBMkJDLE9BQTNCLENBQW1DVixlQUFuQyxDQUFOO0FBQUEsT0FGRCxDQUFQO0FBR0QsS0FmQyxDQUFGO0FBZ0JELEdBdEJPLENBQVI7QUF1QkQsQ0FoRE8sQ0FBUiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjb25maWd1cmVNb2NrU3RvcmUgZnJvbSAncmVkdXgtbW9jay1zdG9yZSc7XG5pbXBvcnQgdGh1bmsgZnJvbSAncmVkdXgtdGh1bmsnO1xuaW1wb3J0IGZldGNoTW9jayBmcm9tICdmZXRjaC1tb2NrJztcbmltcG9ydCB7XG4gIFJFUVVFU1RfVVBDT01JTkdfTU9WSUVTX0FDVElPTixcbiAgUkVRVUVTVF9VUENPTUlOR19NT1ZJRVNfU1VDQ0VTU19BQ1RJT04sXG4gIFJFUVVFU1RfTU9WSUVfREVUQUlMU19BQ1RJT04sXG4gIFJFUVVFU1RfTU9WSUVfREVUQUlMU19TVUNDRVNTX0FDVElPTixcbn0gZnJvbSAnLi4vc3JjL3R5cGVzL3R5cGVzJztcbmltcG9ydCB7ZmV0Y2hVcGNvbWluZ01vdmllcywgZmV0Y2hNb3ZpZURldGFpbHN9IGZyb20gJy4uL3NyYy9hY3Rpb24nO1xuXG5jb25zdCBtaWRkbGV3YXJlcyA9IFt0aHVua107XG5jb25zdCBtb2NrU3RvcmUgPSBjb25maWd1cmVNb2NrU3RvcmUobWlkZGxld2FyZXMpO1xuXG5kZXNjcmliZSgnYXN5bmMgYWN0aW9ucycsICgpID0+IHtcbiAgYWZ0ZXJFYWNoKCgpID0+IHtcbiAgICBmZXRjaE1vY2sucmVzdG9yZSgpO1xuICB9KTtcblxuICBkZXNjcmliZSgncmVxdWVzdCB1cGNvbWluZyBtb3ZpZXMgdGh1bmsgdGVzdCcsICgpID0+IHtcbiAgICBpdCgncmVxdWVzdGluZyBtb3ZpZXMnLCAoKSA9PiB7XG4gICAgICBmZXRjaE1vY2suZ2V0T25jZSgnJywge1xuICAgICAgICBib2R5OiB7cmVzdWx0czogW119LFxuICAgICAgICBoZWFkZXJzOiB7J2NvbnRlbnQtdHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ30sXG4gICAgICB9KTtcblxuICAgICAgY29uc3QgZXhwZWN0ZWRBY3Rpb25zID0gW1xuICAgICAgICB7dHlwZTogUkVRVUVTVF9VUENPTUlOR19NT1ZJRVNfQUNUSU9OfSxcbiAgICAgICAge3R5cGU6IFJFUVVFU1RfVVBDT01JTkdfTU9WSUVTX1NVQ0NFU1NfQUNUSU9OLCBkYXRhOiBbXX0sXG4gICAgICBdO1xuXG4gICAgICBjb25zdCBzdG9yZSA9IG1vY2tTdG9yZSh7fSk7XG5cbiAgICAgIHJldHVybiBzdG9yZVxuICAgICAgICAuZGlzcGF0Y2goZmV0Y2hVcGNvbWluZ01vdmllcygpKVxuICAgICAgICAudGhlbigoKSA9PiBleHBlY3Qoc3RvcmUuZ2V0QWN0aW9ucygpKS50b0VxdWFsKGV4cGVjdGVkQWN0aW9ucykpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgncmVxdWVzdCBkZXRhaWwgb2YgbW92aWUgdGh1bmsgdGVzdCcsICgpID0+IHtcbiAgICBjb25zdCBpZDogbnVtYmVyID0gMTIxMjE7XG4gICAgYWZ0ZXJFYWNoKCgpID0+IHtcbiAgICAgIGZldGNoTW9jay5yZXN0b3JlKCk7XG4gICAgfSk7XG5cbiAgICBpdCgncmVxdWVzdCBtb3ZpZSBkZXRhaWwnLCAoKSA9PiB7XG4gICAgICBmZXRjaE1vY2suZ2V0T25jZSgnJywge1xuICAgICAgICBib2R5OiB7fSxcbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCBleHBlY3RlZEFjdGlvbnMgPSBbXG4gICAgICAgIHt0eXBlOiBSRVFVRVNUX01PVklFX0RFVEFJTFNfQUNUSU9OLCBpZDogaWR9LFxuICAgICAgICB7dHlwZTogUkVRVUVTVF9NT1ZJRV9ERVRBSUxTX1NVQ0NFU1NfQUNUSU9OLCBkYXRhOiB7fX0sXG4gICAgICBdO1xuXG4gICAgICBjb25zdCBzdG9yZSA9IG1vY2tTdG9yZSh7fSk7XG5cbiAgICAgIHJldHVybiBzdG9yZVxuICAgICAgICAuZGlzcGF0Y2goZmV0Y2hNb3ZpZURldGFpbHMoaWQpKVxuICAgICAgICAudGhlbigoKSA9PiBleHBlY3Qoc3RvcmUuZ2V0QWN0aW9ucygpKS50b0VxdWFsKGV4cGVjdGVkQWN0aW9ucykpO1xuICAgIH0pO1xuICB9KTtcbn0pO1xuIl19