{"version":3,"sources":["async-actions-test.ts"],"names":["middlewares","thunk","mockStore","describe","it","afterEach","fetchMock","restore","getOnce","body","results","headers","expectedActions","type","REQUEST_UPCOMING_MOVIES_ACTION","REQUEST_UPCOMING_MOVIES_SUCCESS_ACTION","data","store","movies","dispatch","then","expect","getActions","toEqual"],"mappings":";;AAAA;;AACA;;AACA;;AACA;;AAIA;;AAEA,IAAMA,WAAW,GAAG,CAACC,mBAAD,CAApB;AACA,IAAMC,SAAS,GAAG,6BAAmBF,WAAnB,CAAlB;AAEAG,QAAQ,CAAC,eAAD,EAAkB,YAAM;AAC9BC,EAAAA,EAAE,CAAC,2BAAD,EAA8B,YAAM;AACpCD,IAAAA,QAAQ,CAAC,iDAAD,EAAoD,YAAM;AAChEE,MAAAA,SAAS,CAAC,YAAM;AACdC,2BAAUC,OAAV;AACD,OAFQ,CAAT;AAIAH,MAAAA,EAAE,CAAC,mBAAD,EAAsB,YAAM;AAC5BE,2BAAUE,OAAV,CACE,sFADF,EAEE;AACEC,UAAAA,IAAI,EAAE;AAACC,YAAAA,OAAO,EAAE;AAAV,WADR;AAEEC,UAAAA,OAAO,EAAE;AAAC,4BAAgB;AAAjB;AAFX,SAFF;;AAQA,YAAMC,eAAe,GAAG,CACtB;AAACC,UAAAA,IAAI,EAAEC;AAAP,SADsB,EAEtB;AAACD,UAAAA,IAAI,EAAEE,6CAAP;AAA+CC,UAAAA,IAAI,EAAE;AAArD,SAFsB,CAAxB;AAKA,YAAMC,KAAK,GAAGf,SAAS,CAAC;AAACgB,UAAAA,MAAM,EAAE;AAAT,SAAD,CAAvB;AAEA,eAAOD,KAAK,CACTE,QADI,CACK,kCADL,EAEJC,IAFI,CAEC;AAAA,iBAAMC,MAAM,CAACJ,KAAK,CAACK,UAAN,EAAD,CAAN,CAA2BC,OAA3B,CAAmCX,eAAnC,CAAN;AAAA,SAFD,CAAP;AAGD,OAnBC,CAAF;AAoBD,KAzBO,CAAR;AA0BD,GA3BC,CAAF;AA4BD,CA7BO,CAAR","sourcesContent":["import configureMockStore from 'redux-mock-store';\nimport thunk from 'redux-thunk';\nimport fetchMock from 'fetch-mock';\nimport {\n  REQUEST_UPCOMING_MOVIES_ACTION,\n  REQUEST_UPCOMING_MOVIES_SUCCESS_ACTION,\n} from '../src/types/types';\nimport {fetchUpcomingMovies} from '../src/action';\n\nconst middlewares = [thunk];\nconst mockStore = configureMockStore(middlewares);\n\ndescribe('async actions', () => {\n  it('upcoming movie async test', () => {\n    describe('request movie action and request success action', () => {\n      afterEach(() => {\n        fetchMock.restore();\n      });\n\n      it('requesting movies', () => {\n        fetchMock.getOnce(\n          'https://api.themoviedb.org/3/movie/upcoming?api_key=b3a72b722e11795c7179cc928980a9e2',\n          {\n            body: {results: []},\n            headers: {'content-type': 'application/json'},\n          },\n        );\n\n        const expectedActions = [\n          {type: REQUEST_UPCOMING_MOVIES_ACTION},\n          {type: REQUEST_UPCOMING_MOVIES_SUCCESS_ACTION, data: []},\n        ];\n\n        const store = mockStore({movies: []});\n\n        return store\n          .dispatch(fetchUpcomingMovies())\n          .then(() => expect(store.getActions()).toEqual(expectedActions));\n      });\n    });\n  });\n});\n"]}