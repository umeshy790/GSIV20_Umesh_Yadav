2c34b0385b28a704875815785098ab6e
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _react = _interopRequireDefault(require("react"));

var _reactTestRenderer = _interopRequireDefault(require("react-test-renderer"));

var _MovieCard = _interopRequireDefault(require("../src/components/MovieCard"));

var _MovieDetails = _interopRequireDefault(require("../src/components/MovieDetails"));

var _reduxMockStore = _interopRequireDefault(require("redux-mock-store"));

var _reactRedux = require("react-redux");

describe('Component tests', function () {
  describe('Movie Card Test', function () {
    var movie = {
      id: 1212,
      original_language: 'en',
      original_title: 'dummy',
      overview: 121,
      release_date: 112,
      title: 'dummy',
      vote_average: 1212,
      adult: false,
      backdrop_path: '',
      genre_ids: [121, 22],
      popularity: 4.3,
      poster_path: 'fjfjd',
      video: false,
      vote_count: 121
    };
    it('should match to snapShot', function () {
      var tree = _reactTestRenderer.default.create(_react.default.createElement(_MovieCard.default, {
        movie: movie
      })).toJSON();

      expect(tree).toMatchSnapshot();
    });
  });
  describe('should match to snapshot', function () {
    var store = (0, _reduxMockStore.default)({
      startup: {
        complete: false
      }
    });

    var tree = _reactTestRenderer.default.create(_react.default.createElement(_reactRedux.Provider, {
      store: store
    }, _react.default.createElement(_MovieDetails.default, null))).toJSON();

    expect(tree).toMatchInlineSnapshot();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHMtdGVzdC5qcyJdLCJuYW1lcyI6WyJkZXNjcmliZSIsIm1vdmllIiwiaWQiLCJvcmlnaW5hbF9sYW5ndWFnZSIsIm9yaWdpbmFsX3RpdGxlIiwib3ZlcnZpZXciLCJyZWxlYXNlX2RhdGUiLCJ0aXRsZSIsInZvdGVfYXZlcmFnZSIsImFkdWx0IiwiYmFja2Ryb3BfcGF0aCIsImdlbnJlX2lkcyIsInBvcHVsYXJpdHkiLCJwb3N0ZXJfcGF0aCIsInZpZGVvIiwidm90ZV9jb3VudCIsIml0IiwidHJlZSIsInJlbmRlcmVyIiwiY3JlYXRlIiwidG9KU09OIiwiZXhwZWN0IiwidG9NYXRjaFNuYXBzaG90Iiwic3RvcmUiLCJzdGFydHVwIiwiY29tcGxldGUiLCJ0b01hdGNoSW5saW5lU25hcHNob3QiXSwibWFwcGluZ3MiOiI7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBTUFBLFFBQVEsQ0FBQyxpQkFBRCxFQUFvQixZQUFNO0FBUWhDQSxFQUFBQSxRQUFRLENBQUMsaUJBQUQsRUFBb0IsWUFBTTtBQUNoQyxRQUFNQyxLQUFLLEdBQUc7QUFDWkMsTUFBQUEsRUFBRSxFQUFFLElBRFE7QUFFWkMsTUFBQUEsaUJBQWlCLEVBQUUsSUFGUDtBQUdaQyxNQUFBQSxjQUFjLEVBQUUsT0FISjtBQUlaQyxNQUFBQSxRQUFRLEVBQUUsR0FKRTtBQUtaQyxNQUFBQSxZQUFZLEVBQUUsR0FMRjtBQU1aQyxNQUFBQSxLQUFLLEVBQUUsT0FOSztBQU9aQyxNQUFBQSxZQUFZLEVBQUUsSUFQRjtBQVFaQyxNQUFBQSxLQUFLLEVBQUUsS0FSSztBQVNaQyxNQUFBQSxhQUFhLEVBQUUsRUFUSDtBQVVaQyxNQUFBQSxTQUFTLEVBQUUsQ0FBQyxHQUFELEVBQU0sRUFBTixDQVZDO0FBV1pDLE1BQUFBLFVBQVUsRUFBRSxHQVhBO0FBWVpDLE1BQUFBLFdBQVcsRUFBRSxPQVpEO0FBYVpDLE1BQUFBLEtBQUssRUFBRSxLQWJLO0FBY1pDLE1BQUFBLFVBQVUsRUFBRTtBQWRBLEtBQWQ7QUFnQkFDLElBQUFBLEVBQUUsQ0FBQywwQkFBRCxFQUE2QixZQUFNO0FBQ25DLFVBQU1DLElBQUksR0FBR0MsMkJBQVNDLE1BQVQsQ0FBZ0IsNkJBQUMsa0JBQUQ7QUFBVyxRQUFBLEtBQUssRUFBRWxCO0FBQWxCLFFBQWhCLEVBQTZDbUIsTUFBN0MsRUFBYjs7QUFDQUMsTUFBQUEsTUFBTSxDQUFDSixJQUFELENBQU4sQ0FBYUssZUFBYjtBQUNELEtBSEMsQ0FBRjtBQUlELEdBckJPLENBQVI7QUF1QkF0QixFQUFBQSxRQUFRLENBQUMsMEJBQUQsRUFBNkIsWUFBTTtBQUN6QyxRQUFNdUIsS0FBSyxHQUFHLDZCQUFnQjtBQUM1QkMsTUFBQUEsT0FBTyxFQUFFO0FBQUNDLFFBQUFBLFFBQVEsRUFBRTtBQUFYO0FBRG1CLEtBQWhCLENBQWQ7O0FBR0EsUUFBTVIsSUFBSSxHQUFHQywyQkFDVkMsTUFEVSxDQUVULDZCQUFDLG9CQUFEO0FBQVUsTUFBQSxLQUFLLEVBQUVJO0FBQWpCLE9BQ0UsNkJBQUMscUJBQUQsT0FERixDQUZTLEVBTVZILE1BTlUsRUFBYjs7QUFPQUMsSUFBQUEsTUFBTSxDQUFDSixJQUFELENBQU4sQ0FBYVMscUJBQWI7QUFDRCxHQVpPLENBQVI7QUFhRCxDQTVDTyxDQUFSIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCByZW5kZXJlciBmcm9tICdyZWFjdC10ZXN0LXJlbmRlcmVyJztcbmltcG9ydCBNb3ZpZUNhcmQgZnJvbSAnLi4vc3JjL2NvbXBvbmVudHMvTW92aWVDYXJkJztcbmltcG9ydCBNb3ZpZURldGFpbHMgZnJvbSAnLi4vc3JjL2NvbXBvbmVudHMvTW92aWVEZXRhaWxzJztcbmltcG9ydCBjcmVhdGVNb2NrU3RvcmUgZnJvbSAncmVkdXgtbW9jay1zdG9yZSc7XG5pbXBvcnQge1Byb3ZpZGVyfSBmcm9tICdyZWFjdC1yZWR1eCc7XG4vLyBpbXBvcnQgQXBwIGZyb20gJy4uL0FwcCc7XG5cbi8vIGdsb2JhbC5mZXRjaCA9IGplc3QuZm4oKCkgPT4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiByZXNvbHZlKCkpKTtcbi8vIGplc3QubW9jaygncmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlcicsICgpID0+IHt9KTtcblxuZGVzY3JpYmUoJ0NvbXBvbmVudCB0ZXN0cycsICgpID0+IHtcbiAgLy8gZGVzY3JpYmUoJ0FwcCBUZXN0JywgKCkgPT4ge1xuICAvLyAgIGl0KCdzaG91bGQgbWF0Y2ggdG8gc25hcFNob3QnLCAoKSA9PiB7XG4gIC8vICAgICBjb25zdCB0cmVlID0gcmVuZGVyZXIuY3JlYXRlKDxBcHAgLz4pLnRvSlNPTigpO1xuICAvLyAgICAgZXhwZWN0KHRyZWUpLnRvTWF0Y2hTbmFwc2hvdCgpO1xuICAvLyAgIH0pO1xuICAvLyB9KTtcblxuICBkZXNjcmliZSgnTW92aWUgQ2FyZCBUZXN0JywgKCkgPT4ge1xuICAgIGNvbnN0IG1vdmllID0ge1xuICAgICAgaWQ6IDEyMTIsXG4gICAgICBvcmlnaW5hbF9sYW5ndWFnZTogJ2VuJyxcbiAgICAgIG9yaWdpbmFsX3RpdGxlOiAnZHVtbXknLFxuICAgICAgb3ZlcnZpZXc6IDEyMSxcbiAgICAgIHJlbGVhc2VfZGF0ZTogMTEyLFxuICAgICAgdGl0bGU6ICdkdW1teScsXG4gICAgICB2b3RlX2F2ZXJhZ2U6IDEyMTIsXG4gICAgICBhZHVsdDogZmFsc2UsXG4gICAgICBiYWNrZHJvcF9wYXRoOiAnJyxcbiAgICAgIGdlbnJlX2lkczogWzEyMSwgMjJdLFxuICAgICAgcG9wdWxhcml0eTogNC4zLFxuICAgICAgcG9zdGVyX3BhdGg6ICdmamZqZCcsXG4gICAgICB2aWRlbzogZmFsc2UsXG4gICAgICB2b3RlX2NvdW50OiAxMjEsXG4gICAgfTtcbiAgICBpdCgnc2hvdWxkIG1hdGNoIHRvIHNuYXBTaG90JywgKCkgPT4ge1xuICAgICAgY29uc3QgdHJlZSA9IHJlbmRlcmVyLmNyZWF0ZSg8TW92aWVDYXJkIG1vdmllPXttb3ZpZX0gLz4pLnRvSlNPTigpO1xuICAgICAgZXhwZWN0KHRyZWUpLnRvTWF0Y2hTbmFwc2hvdCgpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnc2hvdWxkIG1hdGNoIHRvIHNuYXBzaG90JywgKCkgPT4ge1xuICAgIGNvbnN0IHN0b3JlID0gY3JlYXRlTW9ja1N0b3JlKHtcbiAgICAgIHN0YXJ0dXA6IHtjb21wbGV0ZTogZmFsc2V9LFxuICAgIH0pO1xuICAgIGNvbnN0IHRyZWUgPSByZW5kZXJlclxuICAgICAgLmNyZWF0ZShcbiAgICAgICAgPFByb3ZpZGVyIHN0b3JlPXtzdG9yZX0+XG4gICAgICAgICAgPE1vdmllRGV0YWlscyAvPlxuICAgICAgICA8L1Byb3ZpZGVyPixcbiAgICAgIClcbiAgICAgIC50b0pTT04oKTtcbiAgICBleHBlY3QodHJlZSkudG9NYXRjaElubGluZVNuYXBzaG90KCk7XG4gIH0pO1xufSk7XG4iXX0=