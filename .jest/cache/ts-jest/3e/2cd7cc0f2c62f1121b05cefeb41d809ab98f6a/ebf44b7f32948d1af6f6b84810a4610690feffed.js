"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = __importDefault(require("react"));
var react_native_1 = require("react-native");
var MovieCard = function (props) {
    var movie = props.movie, handlePress = props.handlePress;
    return (<react_native_1.TouchableWithoutFeedback style={{ flex: 1 }} onPress={handlePress}>
      <react_native_1.View style={styles.container}>
        <react_native_1.View style={styles.body}>
          <react_native_1.Image style={styles.image} source={{
        uri: "http://image.tmdb.org/t/p/original" + (movie === null || movie === void 0 ? void 0 : movie.poster_path)
    }}/>
          <react_native_1.View style={{ flexDirection: 'row', paddingTop: 5, paddingHorizontal: 8 }}>
            <react_native_1.Text ellipsizeMode="tail" numberOfLines={1} style={styles.title}>{movie.title}</react_native_1.Text>
            <react_native_1.Text style={styles.popularity}>({movie.vote_average})</react_native_1.Text>
          </react_native_1.View>
          <react_native_1.View style={{ paddingVertical: 5, paddingHorizontal: 8 }}>
             <react_native_1.Text ellipsizeMode="tail" numberOfLines={2} style={styles.description}>{movie.overview}</react_native_1.Text>
          </react_native_1.View>
        </react_native_1.View>
      </react_native_1.View>
    </react_native_1.TouchableWithoutFeedback>);
};
exports.default = MovieCard;
var styles = react_native_1.StyleSheet.create({
    container: {
        flex: 1,
        borderWidth: 12,
        borderColor: "transparent"
    },
    body: {
        flex: 1,
        maxWidth: 180,
        height: 290,
        borderRadius: 20,
        backgroundColor: "#dfdfdf",
        shadowColor: "#000",
        shadowOffset: {
            width: 0,
            height: 3,
        },
        shadowOpacity: 0.23,
        shadowRadius: 3.42,
        elevation: 6,
    },
    image: {
        borderTopLeftRadius: 20,
        borderTopRightRadius: 20,
        height: 200,
        width: undefined
    },
    title: {
        fontSize: 16,
        color: '#4285f4',
        fontWeight: '500',
        flex: 1,
    },
    popularity: {
        fontSize: 15,
        color: "#4a4a4a",
        fontWeight: "500"
    },
    description: {
        fontSize: 14,
        color: "#4a4a4a"
    }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2hvbWUvdW1lc2gvRG9jdW1lbnRzL2Rldi9HU3luZXJneS9pbWRiL3NyYy9jb21wb25lbnRzL01vdmllQ2FyZC50c3giLCJzb3VyY2VzIjpbIi9ob21lL3VtZXNoL0RvY3VtZW50cy9kZXYvR1N5bmVyZ3kvaW1kYi9zcmMvY29tcG9uZW50cy9Nb3ZpZUNhcmQudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsZ0RBQTBCO0FBQzFCLDZDQUFxRjtBQVFyRixJQUFNLFNBQVMsR0FBRyxVQUFDLEtBQVc7SUFDcEIsSUFBQSxtQkFBSyxFQUFFLCtCQUFXLENBQVc7SUFDckMsT0FBTyxDQUNMLENBQUMsdUNBQXdCLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBQyxJQUFJLEVBQUUsQ0FBQyxFQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FDL0Q7TUFBQSxDQUFDLG1CQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUM1QjtRQUFBLENBQUMsbUJBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQ3ZCO1VBQUEsQ0FBQyxvQkFBSyxDQUNILEtBQUssQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FDcEIsTUFBTSxDQUFDLENBQUM7UUFDUCxHQUFHLEVBQUUsd0NBQXFDLEtBQUssYUFBTCxLQUFLLHVCQUFMLEtBQUssQ0FBRSxXQUFXLENBQUU7S0FDL0QsQ0FBQyxFQUVKO1VBQUEsQ0FBQyxtQkFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUMsYUFBYSxFQUFHLEtBQUssRUFBRSxVQUFVLEVBQUcsQ0FBQyxFQUFFLGlCQUFpQixFQUFHLENBQUMsRUFBQyxDQUFDLENBQzFFO1lBQUEsQ0FBQyxtQkFBSSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxFQUFFLG1CQUFJLENBQ3JGO1lBQUEsQ0FBQyxtQkFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxDQUFDLEVBQUUsbUJBQUksQ0FDOUQ7VUFBQSxFQUFFLG1CQUFJLENBQ047VUFBQSxDQUFDLG1CQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBQyxlQUFlLEVBQUcsQ0FBQyxFQUFFLGlCQUFpQixFQUFHLENBQUMsRUFBQyxDQUFDLENBQ3ZEO2FBQUEsQ0FBQyxtQkFBSSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxFQUFFLG1CQUFJLENBQ2pHO1VBQUEsRUFBRSxtQkFBSSxDQUNSO1FBQUEsRUFBRSxtQkFBSSxDQUNSO01BQUEsRUFBRSxtQkFBSSxDQUNSO0lBQUEsRUFBRSx1Q0FBd0IsQ0FBQyxDQUM1QixDQUFDO0FBQ0osQ0FBQyxDQUFDO0FBRUYsa0JBQWUsU0FBUyxDQUFDO0FBRXpCLElBQU0sTUFBTSxHQUFHLHlCQUFVLENBQUMsTUFBTSxDQUFDO0lBQy9CLFNBQVMsRUFBRTtRQUNULElBQUksRUFBRSxDQUFDO1FBQ1AsV0FBVyxFQUFFLEVBQUU7UUFDZixXQUFXLEVBQUUsYUFBYTtLQUMzQjtJQUNELElBQUksRUFBRTtRQUNKLElBQUksRUFBRSxDQUFDO1FBQ1AsUUFBUSxFQUFFLEdBQUc7UUFDYixNQUFNLEVBQUUsR0FBRztRQUNYLFlBQVksRUFBRSxFQUFFO1FBQ2hCLGVBQWUsRUFBRSxTQUFTO1FBQzFCLFdBQVcsRUFBRSxNQUFNO1FBQ25CLFlBQVksRUFBRTtZQUNiLEtBQUssRUFBRSxDQUFDO1lBQ1IsTUFBTSxFQUFFLENBQUM7U0FDVDtRQUNELGFBQWEsRUFBRSxJQUFJO1FBQ25CLFlBQVksRUFBRSxJQUFJO1FBQ2xCLFNBQVMsRUFBRSxDQUFDO0tBQ1o7SUFDRixLQUFLLEVBQUU7UUFDTCxtQkFBbUIsRUFBRSxFQUFFO1FBQ3ZCLG9CQUFvQixFQUFHLEVBQUU7UUFDdkIsTUFBTSxFQUFFLEdBQUc7UUFDWCxLQUFLLEVBQUcsU0FBUztLQUNwQjtJQUNELEtBQUssRUFBRTtRQUNMLFFBQVEsRUFBRSxFQUFFO1FBQ1osS0FBSyxFQUFFLFNBQVM7UUFDaEIsVUFBVSxFQUFFLEtBQUs7UUFDakIsSUFBSSxFQUFHLENBQUM7S0FDVDtJQUNELFVBQVUsRUFBRTtRQUNWLFFBQVEsRUFBRSxFQUFFO1FBQ1osS0FBSyxFQUFFLFNBQVM7UUFDaEIsVUFBVSxFQUFHLEtBQUs7S0FDbkI7SUFDRCxXQUFXLEVBQUU7UUFDWCxRQUFRLEVBQUUsRUFBRTtRQUNaLEtBQUssRUFBRyxTQUFTO0tBQ2xCO0NBQ0YsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7U3R5bGVTaGVldCwgVGV4dCwgVmlldywgSW1hZ2UsIFRvdWNoYWJsZVdpdGhvdXRGZWVkYmFja30gZnJvbSAncmVhY3QtbmF0aXZlJztcbmltcG9ydCB7TW92aWV9IGZyb20gJy4uL21vZGFsL21vZGFscyc7XG5cbmludGVyZmFjZSBQcm9wIHtcbiAgbW92aWU6IE1vdmllLFxuICBoYW5kbGVQcmVzcyA6ICgpID0+IHt9XG59XG5cbmNvbnN0IE1vdmllQ2FyZCA9IChwcm9wczogUHJvcCkgPT4ge1xuICBjb25zdCB7IG1vdmllLCBoYW5kbGVQcmVzcyB9ID0gcHJvcHM7XG4gIHJldHVybiAoXG4gICAgPFRvdWNoYWJsZVdpdGhvdXRGZWVkYmFjayBzdHlsZT17e2ZsZXg6IDF9fSBvblByZXNzPXtoYW5kbGVQcmVzc30+XG4gICAgICA8VmlldyBzdHlsZT17c3R5bGVzLmNvbnRhaW5lcn0+XG4gICAgICAgIDxWaWV3IHN0eWxlPXtzdHlsZXMuYm9keX0+XG4gICAgICAgICAgPEltYWdlXG4gICAgICAgICAgICAgc3R5bGU9e3N0eWxlcy5pbWFnZX1cbiAgICAgICAgICAgICBzb3VyY2U9e3tcbiAgICAgICAgICAgICAgdXJpOiBgaHR0cDovL2ltYWdlLnRtZGIub3JnL3QvcC9vcmlnaW5hbCR7bW92aWU/LnBvc3Rlcl9wYXRofWBcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgLz5cbiAgICAgICAgICA8VmlldyBzdHlsZT17e2ZsZXhEaXJlY3Rpb24gOiAncm93JywgcGFkZGluZ1RvcCA6IDUsIHBhZGRpbmdIb3Jpem9udGFsIDogOH19PlxuICAgICAgICAgICAgPFRleHQgZWxsaXBzaXplTW9kZT1cInRhaWxcIiBudW1iZXJPZkxpbmVzPXsxfSBzdHlsZT17c3R5bGVzLnRpdGxlfT57bW92aWUudGl0bGV9PC9UZXh0PlxuICAgICAgICAgICAgPFRleHQgc3R5bGU9e3N0eWxlcy5wb3B1bGFyaXR5fT4oe21vdmllLnZvdGVfYXZlcmFnZX0pPC9UZXh0PlxuICAgICAgICAgIDwvVmlldz5cbiAgICAgICAgICA8VmlldyBzdHlsZT17e3BhZGRpbmdWZXJ0aWNhbCA6IDUsIHBhZGRpbmdIb3Jpem9udGFsIDogOH19PlxuICAgICAgICAgICAgIDxUZXh0IGVsbGlwc2l6ZU1vZGU9XCJ0YWlsXCIgbnVtYmVyT2ZMaW5lcz17Mn0gc3R5bGU9e3N0eWxlcy5kZXNjcmlwdGlvbn0+e21vdmllLm92ZXJ2aWV3fTwvVGV4dD5cbiAgICAgICAgICA8L1ZpZXc+XG4gICAgICAgIDwvVmlldz5cbiAgICAgIDwvVmlldz5cbiAgICA8L1RvdWNoYWJsZVdpdGhvdXRGZWVkYmFjaz5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IE1vdmllQ2FyZDtcblxuY29uc3Qgc3R5bGVzID0gU3R5bGVTaGVldC5jcmVhdGUoe1xuICBjb250YWluZXI6IHtcbiAgICBmbGV4OiAxLFxuICAgIGJvcmRlcldpZHRoOiAxMixcbiAgICBib3JkZXJDb2xvcjogXCJ0cmFuc3BhcmVudFwiXG4gIH0sXG4gIGJvZHk6IHtcbiAgICBmbGV4OiAxLFxuICAgIG1heFdpZHRoOiAxODAsXG4gICAgaGVpZ2h0OiAyOTAsXG4gICAgYm9yZGVyUmFkaXVzOiAyMCxcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IFwiI2RmZGZkZlwiLFxuICAgIHNoYWRvd0NvbG9yOiBcIiMwMDBcIixcbiAgICBzaGFkb3dPZmZzZXQ6IHtcbiAgICBcdHdpZHRoOiAwLFxuICAgICBoZWlnaHQ6IDMsXG4gICAgfSxcbiAgICBzaGFkb3dPcGFjaXR5OiAwLjIzLFxuICAgIHNoYWRvd1JhZGl1czogMy40MixcbiAgICBlbGV2YXRpb246IDYsXG4gICB9LFxuICBpbWFnZToge1xuICAgIGJvcmRlclRvcExlZnRSYWRpdXM6IDIwLFxuICAgIGJvcmRlclRvcFJpZ2h0UmFkaXVzIDogMjAsXG4gICAgICBoZWlnaHQ6IDIwMCxcbiAgICAgIHdpZHRoIDogdW5kZWZpbmVkXG4gIH0sXG4gIHRpdGxlOiB7XG4gICAgZm9udFNpemU6IDE2LFxuICAgIGNvbG9yOiAnIzQyODVmNCcsXG4gICAgZm9udFdlaWdodDogJzUwMCcsXG4gICAgZmxleCA6IDEsXG4gIH0sXG4gIHBvcHVsYXJpdHk6IHtcbiAgICBmb250U2l6ZTogMTUsXG4gICAgY29sb3I6IFwiIzRhNGE0YVwiLFxuICAgIGZvbnRXZWlnaHQgOiBcIjUwMFwiXG4gIH0sXG4gIGRlc2NyaXB0aW9uOiB7XG4gICAgZm9udFNpemU6IDE0LFxuICAgIGNvbG9yIDogXCIjNGE0YTRhXCJcbiAgfVxufSk7XG4iXX0=